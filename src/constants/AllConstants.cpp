//
// Created by kevin on 5/27/2022.
//

#include "watchdog/redlines/ValveRedline.h"
#include "watchdog/redlines/IntWithinRedline.h"
#include "AllECSStates.h"
#include "AllSequences.h"

/**
 * THESE FUNCTIONS ARE NOT AUTOMATICALLY GENERATED, AVOID DELETING THEM
 */
 /*
  *     ECSValveState loxVent = ECSValveState::INVALID;
    ECSValveState loxPressurant = ECSValveState::INVALID;
    ECSValveState loxFlow = ECSValveState::INVALID;
    ECSValveState loxPurge = ECSValveState::INVALID;
    ECSValveState kerVent = ECSValveState::INVALID;
    ECSValveState kerPressurant = ECSValveState::INVALID;
    ECSValveState kerFlow = ECSValveState::INVALID;
    ECSValveState kerPurge = ECSValveState::INVALID;
  */
std::function<ECSValveState(SensorData &)> loxVentSelector = [](SensorData &data) { return data.loxVent; };
std::function<ECSValveState(SensorData &)> loxPressurantSelector = [](SensorData &data) { return data.loxPressurant; };
std::function<ECSValveState(SensorData &)> loxFlowSelector = [](SensorData &data) { return data.loxFlow; };
std::function<ECSValveState(SensorData &)> loxPurgeSelector = [](SensorData &data) { return data.loxPurge; };

std::function<ECSValveState(SensorData &)> kerVentSelector = [](SensorData &data) { return data.kerVent; };
std::function<ECSValveState(SensorData &)> kerPressurantSelector = [](SensorData &data) { return data.kerPressurant; };
std::function<ECSValveState(SensorData &)> kerFlowSelector = [](SensorData &data) { return data.kerFlow; };
std::function<ECSValveState(SensorData &)> kerPurgeSelector = [](SensorData &data) { return data.kerPurge; };

/*
 *     int loxTankDucer = 0;
    int kerTankDucer = 0;
    int purgeDucer = 0;
    int loxInletDucer = 0;
    int kerInletDucer = 0;
    int kerPintleDucer = 0;
    int loxVenturi = 0;
    int kerVenturi = 0;
    int loadCell = 0;
    int pneumaticDucer = 0;
    int loxRegDucer = 0;
    int kerRegDucer = 0;
    int n2pressDucer = 0;
 */
std::function<int(SensorData &)> loxTankDucerSelector = [](SensorData &data) { return data.loxTankDucer; };
std::function<int(SensorData &)> kerTankDucerSelector = [](SensorData &data) { return data.kerTankDucer; };
std::function<int(SensorData &)> purgeDucerSelector = [](SensorData &data) { return data.purgeDucer; };
std::function<int(SensorData &)> loxInletDucerSelector = [](SensorData &data) { return data.loxInletDucer; };
std::function<int(SensorData &)> kerInletDucerSelector = [](SensorData &data) { return data.kerInletDucer; };
std::function<int(SensorData &)> kerPintleDucerSelector = [](SensorData &data) { return data.kerPintleDucer; };
std::function<int(SensorData &)> loxVenturiSelector = [](SensorData &data) { return data.loxVenturi; };
std::function<int(SensorData &)> kerVenturiSelector = [](SensorData &data) { return data.kerVenturi; };
std::function<int(SensorData &)> loadCellSelector = [](SensorData &data) { return data.loadCell; };

std::function<int(SensorData &)> pneumaticDucerSelector = [](SensorData &data) { return data.pneumaticDucer; };
std::function<int(SensorData &)> loxRegDucerSelector = [](SensorData &data) { return data.loxRegDucer; };
std::function<int(SensorData &)> kerRegDucerSelector = [](SensorData &data) { return data.kerRegDucer; };
std::function<int(SensorData &)> n2pressDucerSelector = [](SensorData &data) { return data.n2pressDucer; };

std::function<int(SensorData &)> loxTankTCSelector = [](SensorData &data) { return data.loxTankTC; };
std::function<int(SensorData &)> kerInletTCSelector = [](SensorData &data) { return data.kerInletTC; };
std::function<int(SensorData &)> kerOutletTCSelector = [](SensorData &data) { return data.kerOutletTC; };
std::function<int(SensorData &)> miscTCSelector = [](SensorData &data) { return data.miscTC; };

/**
 * EVERYTHING BELOW IS GENERATED BY A SCRIPT, ANY TWEAKS HERE WILL BE REPLACED EVENTUALLY
 */

namespace {
    CommandData ONLINE_SAFEConfig = CommandData(ECSValveState::OPEN,
                                                ECSValveState::CLOSED,
                                                ECSValveState::CLOSED,
                                                ECSValveState::CLOSED,
                                                ECSValveState::OPEN,
                                                ECSValveState::CLOSED,
                                                ECSValveState::CLOSED,
                                                ECSValveState::CLOSED);
    std::vector<std::unique_ptr<IRedline>> ONLINE_SAFERedlines = make_vector_unique<IRedline>(
            RedlineFactory("loxTankDucer", loxTankDucerSelector, 0, 30),
            RedlineFactory("kerTankDucer", kerTankDucerSelector, 0, 30),
            RedlineFactory("purgeDucer", purgeDucerSelector, 200, 500),
            RedlineFactory("loxInletDucer", loxInletDucerSelector, 0, 30),
            RedlineFactory("kerInletDucer", kerInletDucerSelector, 0, 30),
            RedlineFactory("kerPintleDucer", kerPintleDucerSelector, 0, 30),
            RedlineFactory("loxVenturi", loxVenturiSelector, 0, 10),
            RedlineFactory("kerVenturi", kerVenturiSelector, 0, 10),
            RedlineFactory("loadCell", loadCellSelector, 0, 30),
            RedlineFactory("pneumaticDucer", pneumaticDucerSelector, 90, 140),
            RedlineFactory("loxRegDucer", loxRegDucerSelector, 0, 800),
            RedlineFactory("kerRegDucer", kerRegDucerSelector, 0, 900),
            RedlineFactory("n2pressDucer", n2pressDucerSelector, 1000, 2000),
            RedlineFactory("loxTankTC", loxTankTCSelector, -1000, 1000),
            RedlineFactory("kerInletTC", kerInletTCSelector, -1000, 1000),
            RedlineFactory("kerOutletTC", kerOutletTCSelector, -1000, 1000),
            RedlineFactory("miscTC", miscTCSelector, -1000, 1000),
            RedlineFactory("loxVent", loxVentSelector, ECSValveState::OPEN),
            RedlineFactory("loxPressurant", loxPressurantSelector, ECSValveState::CLOSED),
            RedlineFactory("loxFlow", loxFlowSelector, ECSValveState::CLOSED),
            RedlineFactory("loxPurge", loxPurgeSelector, ECSValveState::CLOSED),
            RedlineFactory("kerVent", kerVentSelector, ECSValveState::OPEN),
            RedlineFactory("kerPressurant", kerPressurantSelector, ECSValveState::CLOSED),
            RedlineFactory("kerFlow", kerFlowSelector, ECSValveState::CLOSED),
            RedlineFactory("kerPurge", kerPurgeSelector, ECSValveState::CLOSED));
}
const ECSState ONLINE_SAFE = ECSState("ONLINE_SAFE", std::move(ONLINE_SAFERedlines), ONLINE_SAFEConfig, ONLINE_SAFEConfig);

namespace {
    CommandData KER_FILLConfig = CommandData(ECSValveState::OPEN,
                                             ECSValveState::CLOSED,
                                             ECSValveState::CLOSED,
                                             ECSValveState::CLOSED,
                                             ECSValveState::OPEN,
                                             ECSValveState::CLOSED,
                                             ECSValveState::CLOSED,
                                             ECSValveState::CLOSED);
    std::vector<std::unique_ptr<IRedline>> KER_FILLRedlines = make_vector_unique<IRedline>(
            RedlineFactory("loxTankDucer", loxTankDucerSelector, 0, 30),
            RedlineFactory("kerTankDucer", kerTankDucerSelector, 0, 30),
            RedlineFactory("purgeDucer", purgeDucerSelector, 200, 500),
            RedlineFactory("loxInletDucer", loxInletDucerSelector, 0, 30),
            RedlineFactory("kerInletDucer", kerInletDucerSelector, 0, 30),
            RedlineFactory("kerPintleDucer", kerPintleDucerSelector, 0, 30),
            RedlineFactory("loxVenturi", loxVenturiSelector, 0, 10),
            RedlineFactory("kerVenturi", kerVenturiSelector, 0, 10),
            RedlineFactory("loadCell", loadCellSelector, 0, 30),
            RedlineFactory("pneumaticDucer", pneumaticDucerSelector, 90, 140),
            RedlineFactory("loxRegDucer", loxRegDucerSelector, 0, 30),
            RedlineFactory("kerRegDucer", kerRegDucerSelector, 0, 30),
            RedlineFactory("n2pressDucer", n2pressDucerSelector, 1000, 2000),
            RedlineFactory("loxTankTC", loxTankTCSelector, -1000, 1000),
            RedlineFactory("kerInletTC", kerInletTCSelector, -1000, 1000),
            RedlineFactory("kerOutletTC", kerOutletTCSelector, -1000, 1000),
            RedlineFactory("miscTC", miscTCSelector, -1000, 1000),
            RedlineFactory("loxVent", loxVentSelector, ECSValveState::OPEN),
            RedlineFactory("loxPressurant", loxPressurantSelector, ECSValveState::CLOSED),
            RedlineFactory("loxFlow", loxFlowSelector, ECSValveState::CLOSED),
            RedlineFactory("loxPurge", loxPurgeSelector, ECSValveState::CLOSED),
            RedlineFactory("kerVent", kerVentSelector, ECSValveState::OPEN),
            RedlineFactory("kerPressurant", kerPressurantSelector, ECSValveState::CLOSED),
            RedlineFactory("kerFlow", kerFlowSelector, ECSValveState::CLOSED),
            RedlineFactory("kerPurge", kerPurgeSelector, ECSValveState::CLOSED));
}
const ECSState KER_FILL = ECSState("KER_FILL", std::move(KER_FILLRedlines), KER_FILLConfig, KER_FILLConfig);

namespace {
    CommandData KER_POST_FILLConfig = CommandData(ECSValveState::OPEN,
                                                  ECSValveState::CLOSED,
                                                  ECSValveState::CLOSED,
                                                  ECSValveState::CLOSED,
                                                  ECSValveState::CLOSED,
                                                  ECSValveState::CLOSED,
                                                  ECSValveState::CLOSED,
                                                  ECSValveState::CLOSED);
    std::vector<std::unique_ptr<IRedline>> KER_POST_FILLRedlines = make_vector_unique<IRedline>(
            RedlineFactory("loxTankDucer", loxTankDucerSelector, 0, 30),
            RedlineFactory("kerTankDucer", kerTankDucerSelector, 0, 30),
            RedlineFactory("purgeDucer", purgeDucerSelector, 200, 500),
            RedlineFactory("loxInletDucer", loxInletDucerSelector, 0, 30),
            RedlineFactory("kerInletDucer", kerInletDucerSelector, 0, 30),
            RedlineFactory("kerPintleDucer", kerPintleDucerSelector, 0, 30),
            RedlineFactory("loxVenturi", loxVenturiSelector, 0, 10),
            RedlineFactory("kerVenturi", kerVenturiSelector, 0, 10),
            RedlineFactory("loadCell", loadCellSelector, 0, 30),
            RedlineFactory("pneumaticDucer", pneumaticDucerSelector, 90, 140),
            RedlineFactory("loxRegDucer", loxRegDucerSelector, 0, 30),
            RedlineFactory("kerRegDucer", kerRegDucerSelector, 0, 30),
            RedlineFactory("n2pressDucer", n2pressDucerSelector, 1000, 2000),
            RedlineFactory("loxTankTC", loxTankTCSelector, -1000, 1000),
            RedlineFactory("kerInletTC", kerInletTCSelector, -1000, 1000),
            RedlineFactory("kerOutletTC", kerOutletTCSelector, -1000, 1000),
            RedlineFactory("miscTC", miscTCSelector, -1000, 1000),
            RedlineFactory("loxVent", loxVentSelector, ECSValveState::OPEN),
            RedlineFactory("loxPressurant", loxPressurantSelector, ECSValveState::CLOSED),
            RedlineFactory("loxFlow", loxFlowSelector, ECSValveState::CLOSED),
            RedlineFactory("loxPurge", loxPurgeSelector, ECSValveState::CLOSED),
            RedlineFactory("kerVent", kerVentSelector, ECSValveState::CLOSED),
            RedlineFactory("kerPressurant", kerPressurantSelector, ECSValveState::CLOSED),
            RedlineFactory("kerFlow", kerFlowSelector, ECSValveState::CLOSED),
            RedlineFactory("kerPurge", kerPurgeSelector, ECSValveState::CLOSED));
}
const ECSState KER_POST_FILL = ECSState("KER_POST_FILL", std::move(KER_POST_FILLRedlines), KER_POST_FILLConfig, KER_POST_FILLConfig);

namespace {
    CommandData LOX_FILLConfig = CommandData(ECSValveState::OPEN,
                                             ECSValveState::CLOSED,
                                             ECSValveState::CLOSED,
                                             ECSValveState::CLOSED,
                                             ECSValveState::CLOSED,
                                             ECSValveState::CLOSED,
                                             ECSValveState::CLOSED,
                                             ECSValveState::CLOSED);
    std::vector<std::unique_ptr<IRedline>> LOX_FILLRedlines = make_vector_unique<IRedline>(
            RedlineFactory("loxTankDucer", loxTankDucerSelector, 0, 30),
            RedlineFactory("kerTankDucer", kerTankDucerSelector, 0, 30),
            RedlineFactory("purgeDucer", purgeDucerSelector, 200, 500),
            RedlineFactory("loxInletDucer", loxInletDucerSelector, 0, 30),
            RedlineFactory("kerInletDucer", kerInletDucerSelector, 0, 30),
            RedlineFactory("kerPintleDucer", kerPintleDucerSelector, 0, 30),
            RedlineFactory("loxVenturi", loxVenturiSelector, 0, 20),
            RedlineFactory("kerVenturi", kerVenturiSelector, 0, 10),
            RedlineFactory("loadCell", loadCellSelector, 0, 30),
            RedlineFactory("pneumaticDucer", pneumaticDucerSelector, 90, 140),
            RedlineFactory("loxRegDucer", loxRegDucerSelector, 0, 800),
            RedlineFactory("kerRegDucer", kerRegDucerSelector, 0, 900),
            RedlineFactory("n2pressDucer", n2pressDucerSelector, 1000, 2000),
            RedlineFactory("loxTankTC", loxTankTCSelector, -1000, 1000),
            RedlineFactory("kerInletTC", kerInletTCSelector, -1000, 1000),
            RedlineFactory("kerOutletTC", kerOutletTCSelector, -1000, 1000),
            RedlineFactory("miscTC", miscTCSelector, -1000, 1000),
            RedlineFactory("loxVent", loxVentSelector, ECSValveState::OPEN),
            RedlineFactory("loxPressurant", loxPressurantSelector, ECSValveState::CLOSED),
            RedlineFactory("loxFlow", loxFlowSelector, ECSValveState::CLOSED),
            RedlineFactory("loxPurge", loxPurgeSelector, ECSValveState::CLOSED),
            RedlineFactory("kerVent", kerVentSelector, ECSValveState::CLOSED),
            RedlineFactory("kerPressurant", kerPressurantSelector, ECSValveState::CLOSED),
            RedlineFactory("kerFlow", kerFlowSelector, ECSValveState::CLOSED),
            RedlineFactory("kerPurge", kerPurgeSelector, ECSValveState::CLOSED));
}
const ECSState LOX_FILL = ECSState("LOX_FILL", std::move(LOX_FILLRedlines), LOX_FILLConfig, LOX_FILLConfig);

namespace {
    CommandData LOX_POST_FILLConfig = CommandData(ECSValveState::OPEN,
                                                  ECSValveState::CLOSED,
                                                  ECSValveState::CLOSED,
                                                  ECSValveState::CLOSED,
                                                  ECSValveState::CLOSED,
                                                  ECSValveState::CLOSED,
                                                  ECSValveState::CLOSED,
                                                  ECSValveState::CLOSED);
    std::vector<std::unique_ptr<IRedline>> LOX_POST_FILLRedlines = make_vector_unique<IRedline>(
            RedlineFactory("loxTankDucer", loxTankDucerSelector, 0, 30),
            RedlineFactory("kerTankDucer", kerTankDucerSelector, 0, 30),
            RedlineFactory("purgeDucer", purgeDucerSelector, 200, 500),
            RedlineFactory("loxInletDucer", loxInletDucerSelector, 0, 30),
            RedlineFactory("kerInletDucer", kerInletDucerSelector, 0, 30),
            RedlineFactory("kerPintleDucer", kerPintleDucerSelector, 0, 30),
            RedlineFactory("loxVenturi", loxVenturiSelector, 0, 10),
            RedlineFactory("kerVenturi", kerVenturiSelector, 0, 10),
            RedlineFactory("loadCell", loadCellSelector, 0, 30),
            RedlineFactory("pneumaticDucer", pneumaticDucerSelector, 90, 140),
            RedlineFactory("loxRegDucer", loxRegDucerSelector, 0, 800),
            RedlineFactory("kerRegDucer", kerRegDucerSelector, 0, 900),
            RedlineFactory("n2pressDucer", n2pressDucerSelector, 1000, 2000),
            RedlineFactory("loxTankTC", loxTankTCSelector, -1000, 1000),
            RedlineFactory("kerInletTC", kerInletTCSelector, -1000, 1000),
            RedlineFactory("kerOutletTC", kerOutletTCSelector, -1000, 1000),
            RedlineFactory("miscTC", miscTCSelector, -1000, 1000),
            RedlineFactory("loxVent", loxVentSelector, ECSValveState::OPEN),
            RedlineFactory("loxPressurant", loxPressurantSelector, ECSValveState::CLOSED),
            RedlineFactory("loxFlow", loxFlowSelector, ECSValveState::CLOSED),
            RedlineFactory("loxPurge", loxPurgeSelector, ECSValveState::CLOSED),
            RedlineFactory("kerVent", kerVentSelector, ECSValveState::CLOSED),
            RedlineFactory("kerPressurant", kerPressurantSelector, ECSValveState::CLOSED),
            RedlineFactory("kerFlow", kerFlowSelector, ECSValveState::CLOSED),
            RedlineFactory("kerPurge", kerPurgeSelector, ECSValveState::CLOSED));
}
const ECSState LOX_POST_FILL = ECSState("LOX_POST_FILL", std::move(LOX_POST_FILLRedlines), LOX_POST_FILLConfig, LOX_POST_FILLConfig);

namespace {
    CommandData ALL_READY_TO_PRESSURIZEConfig = CommandData(ECSValveState::CLOSED,
                                                            ECSValveState::CLOSED,
                                                            ECSValveState::CLOSED,
                                                            ECSValveState::CLOSED,
                                                            ECSValveState::CLOSED,
                                                            ECSValveState::CLOSED,
                                                            ECSValveState::CLOSED,
                                                            ECSValveState::CLOSED);
    std::vector<std::unique_ptr<IRedline>> ALL_READY_TO_PRESSURIZERedlines = make_vector_unique<IRedline>(
            RedlineFactory("loxTankDucer", loxTankDucerSelector, 0, 200),
            RedlineFactory("kerTankDucer", kerTankDucerSelector, 0, 30),
            RedlineFactory("purgeDucer", purgeDucerSelector, 200, 500),
            RedlineFactory("loxInletDucer", loxInletDucerSelector, 0, 30),
            RedlineFactory("kerInletDucer", kerInletDucerSelector, 0, 30),
            RedlineFactory("kerPintleDucer", kerPintleDucerSelector, 0, 30),
            RedlineFactory("loxVenturi", loxVenturiSelector, 0, 10),
            RedlineFactory("kerVenturi", kerVenturiSelector, 0, 10),
            RedlineFactory("loadCell", loadCellSelector, 0, 30),
            RedlineFactory("pneumaticDucer", pneumaticDucerSelector, 90, 140),
            RedlineFactory("loxRegDucer", loxRegDucerSelector, 550, 800),
            RedlineFactory("kerRegDucer", kerRegDucerSelector, 550, 900),
            RedlineFactory("n2pressDucer", n2pressDucerSelector, 1000, 2000),
            RedlineFactory("loxTankTC", loxTankTCSelector, -1000, 1000),
            RedlineFactory("kerInletTC", kerInletTCSelector, -1000, 1000),
            RedlineFactory("kerOutletTC", kerOutletTCSelector, -1000, 1000),
            RedlineFactory("miscTC", miscTCSelector, -1000, 1000),
            RedlineFactory("loxVent", loxVentSelector, ECSValveState::CLOSED),
            RedlineFactory("loxPressurant", loxPressurantSelector, ECSValveState::CLOSED),
            RedlineFactory("loxFlow", loxFlowSelector, ECSValveState::CLOSED),
            RedlineFactory("loxPurge", loxPurgeSelector, ECSValveState::CLOSED),
            RedlineFactory("kerVent", kerVentSelector, ECSValveState::CLOSED),
            RedlineFactory("kerPressurant", kerPressurantSelector, ECSValveState::CLOSED),
            RedlineFactory("kerFlow", kerFlowSelector, ECSValveState::CLOSED),
            RedlineFactory("kerPurge", kerPurgeSelector, ECSValveState::CLOSED));
}
const ECSState ALL_READY_TO_PRESSURIZE = ECSState("ALL_READY_TO_PRESSURIZE", std::move(ALL_READY_TO_PRESSURIZERedlines), ALL_READY_TO_PRESSURIZEConfig, ALL_READY_TO_PRESSURIZEConfig);

namespace {
    CommandData ALL_PRESSURIZINGConfig = CommandData(ECSValveState::CLOSED,
                                                     ECSValveState::OPEN,
                                                     ECSValveState::CLOSED,
                                                     ECSValveState::CLOSED,
                                                     ECSValveState::CLOSED,
                                                     ECSValveState::OPEN,
                                                     ECSValveState::CLOSED,
                                                     ECSValveState::CLOSED);
    std::vector<std::unique_ptr<IRedline>> ALL_PRESSURIZINGRedlines = make_vector_unique<IRedline>(
            RedlineFactory("loxTankDucer", loxTankDucerSelector, 550, 800),
            RedlineFactory("kerTankDucer", kerTankDucerSelector, 550, 900),
            RedlineFactory("purgeDucer", purgeDucerSelector, 200, 500),
            RedlineFactory("loxInletDucer", loxInletDucerSelector, 0, 30),
            RedlineFactory("kerInletDucer", kerInletDucerSelector, 0, 30),
            RedlineFactory("kerPintleDucer", kerPintleDucerSelector, 0, 30),
            RedlineFactory("loxVenturi", loxVenturiSelector, 0, 10),
            RedlineFactory("kerVenturi", kerVenturiSelector, 0, 10),
            RedlineFactory("loadCell", loadCellSelector, 0, 30),
            RedlineFactory("pneumaticDucer", pneumaticDucerSelector, 90, 140),
            RedlineFactory("loxRegDucer", loxRegDucerSelector, 550, 800),
            RedlineFactory("kerRegDucer", kerRegDucerSelector, 550, 900),
            RedlineFactory("n2pressDucer", n2pressDucerSelector, 1000, 2000),
            RedlineFactory("loxTankTC", loxTankTCSelector, -1000, 1000),
            RedlineFactory("kerInletTC", kerInletTCSelector, -1000, 1000),
            RedlineFactory("kerOutletTC", kerOutletTCSelector, -1000, 1000),
            RedlineFactory("miscTC", miscTCSelector, -1000, 1000),
            RedlineFactory("loxVent", loxVentSelector, ECSValveState::CLOSED),
            RedlineFactory("loxPressurant", loxPressurantSelector, ECSValveState::OPEN),
            RedlineFactory("loxFlow", loxFlowSelector, ECSValveState::CLOSED),
            RedlineFactory("loxPurge", loxPurgeSelector, ECSValveState::CLOSED),
            RedlineFactory("kerVent", kerVentSelector, ECSValveState::CLOSED),
            RedlineFactory("kerPressurant", kerPressurantSelector, ECSValveState::OPEN),
            RedlineFactory("kerFlow", kerFlowSelector, ECSValveState::CLOSED),
            RedlineFactory("kerPurge", kerPurgeSelector, ECSValveState::CLOSED));
}
const ECSState ALL_PRESSURIZING = ECSState("ALL_PRESSURIZING", std::move(ALL_PRESSURIZINGRedlines), ALL_PRESSURIZINGConfig, ALL_PRESSURIZINGConfig);

namespace {
    CommandData LOX_PRESSURIZINGConfig = CommandData(ECSValveState::CLOSED,
                                                     ECSValveState::OPEN,
                                                     ECSValveState::CLOSED,
                                                     ECSValveState::CLOSED,
                                                     ECSValveState::CLOSED,
                                                     ECSValveState::CLOSED,
                                                     ECSValveState::CLOSED,
                                                     ECSValveState::CLOSED);
    std::vector<std::unique_ptr<IRedline>> LOX_PRESSURIZINGRedlines = make_vector_unique<IRedline>(
            RedlineFactory("loxTankDucer", loxTankDucerSelector, 550, 800),
            RedlineFactory("kerTankDucer", kerTankDucerSelector, 0, 30),
            RedlineFactory("purgeDucer", purgeDucerSelector, 200, 500),
            RedlineFactory("loxInletDucer", loxInletDucerSelector, 0, 30),
            RedlineFactory("kerInletDucer", kerInletDucerSelector, 0, 30),
            RedlineFactory("kerPintleDucer", kerPintleDucerSelector, 0, 30),
            RedlineFactory("loxVenturi", loxVenturiSelector, 0, 10),
            RedlineFactory("kerVenturi", kerVenturiSelector, 0, 10),
            RedlineFactory("loadCell", loadCellSelector, 0, 30),
            RedlineFactory("pneumaticDucer", pneumaticDucerSelector, 90, 140),
            RedlineFactory("loxRegDucer", loxRegDucerSelector, 550, 800),
            RedlineFactory("kerRegDucer", kerRegDucerSelector, 550, 900),
            RedlineFactory("n2pressDucer", n2pressDucerSelector, 1000, 2000),
            RedlineFactory("loxTankTC", loxTankTCSelector, -1000, 1000),
            RedlineFactory("kerInletTC", kerInletTCSelector, -1000, 1000),
            RedlineFactory("kerOutletTC", kerOutletTCSelector, -1000, 1000),
            RedlineFactory("miscTC", miscTCSelector, -1000, 1000),
            RedlineFactory("loxVent", loxVentSelector, ECSValveState::CLOSED),
            RedlineFactory("loxPressurant", loxPressurantSelector, ECSValveState::OPEN),
            RedlineFactory("loxFlow", loxFlowSelector, ECSValveState::CLOSED),
            RedlineFactory("loxPurge", loxPurgeSelector, ECSValveState::CLOSED),
            RedlineFactory("kerVent", kerVentSelector, ECSValveState::CLOSED),
            RedlineFactory("kerPressurant", kerPressurantSelector, ECSValveState::CLOSED),
            RedlineFactory("kerFlow", kerFlowSelector, ECSValveState::CLOSED),
            RedlineFactory("kerPurge", kerPurgeSelector, ECSValveState::CLOSED));
}
const ECSState LOX_PRESSURIZING = ECSState("LOX_PRESSURIZING", std::move(LOX_PRESSURIZINGRedlines), LOX_PRESSURIZINGConfig, LOX_PRESSURIZINGConfig);

namespace {
    CommandData KER_PRESSURIZINGConfig = CommandData(ECSValveState::CLOSED,
                                                     ECSValveState::CLOSED,
                                                     ECSValveState::CLOSED,
                                                     ECSValveState::CLOSED,
                                                     ECSValveState::CLOSED,
                                                     ECSValveState::OPEN,
                                                     ECSValveState::CLOSED,
                                                     ECSValveState::CLOSED);
    std::vector<std::unique_ptr<IRedline>> KER_PRESSURIZINGRedlines = make_vector_unique<IRedline>(
            RedlineFactory("loxTankDucer", loxTankDucerSelector, 0, 30),
            RedlineFactory("kerTankDucer", kerTankDucerSelector, 550, 900),
            RedlineFactory("purgeDucer", purgeDucerSelector, 200, 500),
            RedlineFactory("loxInletDucer", loxInletDucerSelector, 0, 30),
            RedlineFactory("kerInletDucer", kerInletDucerSelector, 0, 30),
            RedlineFactory("kerPintleDucer", kerPintleDucerSelector, 0, 30),
            RedlineFactory("loxVenturi", loxVenturiSelector, 0, 10),
            RedlineFactory("kerVenturi", kerVenturiSelector, 0, 10),
            RedlineFactory("loadCell", loadCellSelector, 0, 30),
            RedlineFactory("pneumaticDucer", pneumaticDucerSelector, 90, 140),
            RedlineFactory("loxRegDucer", loxRegDucerSelector, 550, 800),
            RedlineFactory("kerRegDucer", kerRegDucerSelector, 550, 900),
            RedlineFactory("n2pressDucer", n2pressDucerSelector, 1000, 2000),
            RedlineFactory("loxTankTC", loxTankTCSelector, -1000, 1000),
            RedlineFactory("kerInletTC", kerInletTCSelector, -1000, 1000),
            RedlineFactory("kerOutletTC", kerOutletTCSelector, -1000, 1000),
            RedlineFactory("miscTC", miscTCSelector, -1000, 1000),
            RedlineFactory("loxVent", loxVentSelector, ECSValveState::CLOSED),
            RedlineFactory("loxPressurant", loxPressurantSelector, ECSValveState::CLOSED),
            RedlineFactory("loxFlow", loxFlowSelector, ECSValveState::CLOSED),
            RedlineFactory("loxPurge", loxPurgeSelector, ECSValveState::CLOSED),
            RedlineFactory("kerVent", kerVentSelector, ECSValveState::CLOSED),
            RedlineFactory("kerPressurant", kerPressurantSelector, ECSValveState::OPEN),
            RedlineFactory("kerFlow", kerFlowSelector, ECSValveState::CLOSED),
            RedlineFactory("kerPurge", kerPurgeSelector, ECSValveState::CLOSED));
}
const ECSState KER_PRESSURIZING = ECSState("KER_PRESSURIZING", std::move(KER_PRESSURIZINGRedlines), KER_PRESSURIZINGConfig, KER_PRESSURIZINGConfig);

namespace {
    CommandData ALL_FLOWConfig = CommandData(ECSValveState::CLOSED,
                                             ECSValveState::OPEN,
                                             ECSValveState::OPEN,
                                             ECSValveState::CLOSED,
                                             ECSValveState::CLOSED,
                                             ECSValveState::OPEN,
                                             ECSValveState::OPEN,
                                             ECSValveState::CLOSED);
    std::vector<std::unique_ptr<IRedline>> ALL_FLOWRedlines = make_vector_unique<IRedline>(
            RedlineFactory("loxTankDucer", loxTankDucerSelector, 550, 800),
            RedlineFactory("kerTankDucer", kerTankDucerSelector, 550, 900),
            RedlineFactory("purgeDucer", purgeDucerSelector, 200, 500),
            RedlineFactory("loxInletDucer", loxInletDucerSelector, 550, 800),
            RedlineFactory("kerInletDucer", kerInletDucerSelector, 550, 900),
            RedlineFactory("kerPintleDucer", kerPintleDucerSelector, 550, 900),
            RedlineFactory("loxVenturi", loxVenturiSelector, 0, 150),
            RedlineFactory("kerVenturi", kerVenturiSelector, 0, 150),
            RedlineFactory("loadCell", loadCellSelector, 650, 850),
            RedlineFactory("pneumaticDucer", pneumaticDucerSelector, 90, 140),
            RedlineFactory("loxRegDucer", loxRegDucerSelector, 550, 800),
            RedlineFactory("kerRegDucer", kerRegDucerSelector, 550, 900),
            RedlineFactory("n2pressDucer", n2pressDucerSelector, 1000, 2000),
            RedlineFactory("loxTankTC", loxTankTCSelector, -1000, 1000),
            RedlineFactory("kerInletTC", kerInletTCSelector, -1000, 1000),
            RedlineFactory("kerOutletTC", kerOutletTCSelector, -1000, 1000),
            RedlineFactory("miscTC", miscTCSelector, -1000, 1000),
            RedlineFactory("loxVent", loxVentSelector, ECSValveState::CLOSED),
            RedlineFactory("loxPressurant", loxPressurantSelector, ECSValveState::OPEN),
            RedlineFactory("loxFlow", loxFlowSelector, ECSValveState::OPEN),
            RedlineFactory("loxPurge", loxPurgeSelector, ECSValveState::CLOSED),
            RedlineFactory("kerVent", kerVentSelector, ECSValveState::CLOSED),
            RedlineFactory("kerPressurant", kerPressurantSelector, ECSValveState::OPEN),
            RedlineFactory("kerFlow", kerFlowSelector, ECSValveState::OPEN),
            RedlineFactory("kerPurge", kerPurgeSelector, ECSValveState::CLOSED));
}
const ECSState ALL_FLOW = ECSState("ALL_FLOW", std::move(ALL_FLOWRedlines), ALL_FLOWConfig, ALL_FLOWConfig);

namespace {
    CommandData LOX_FLOWConfig = CommandData(ECSValveState::CLOSED,
                                             ECSValveState::OPEN,
                                             ECSValveState::OPEN,
                                             ECSValveState::CLOSED,
                                             ECSValveState::CLOSED,
                                             ECSValveState::OPEN,
                                             ECSValveState::CLOSED,
                                             ECSValveState::CLOSED);
    std::vector<std::unique_ptr<IRedline>> LOX_FLOWRedlines = make_vector_unique<IRedline>(
            RedlineFactory("loxTankDucer", loxTankDucerSelector, 550, 800),
            RedlineFactory("kerTankDucer", kerTankDucerSelector, 0, 900),
            RedlineFactory("purgeDucer", purgeDucerSelector, 200, 500),
            RedlineFactory("loxInletDucer", loxInletDucerSelector, 550, 800),
            RedlineFactory("kerInletDucer", kerInletDucerSelector, 0, 50),
            RedlineFactory("kerPintleDucer", kerPintleDucerSelector, 0, 30),
            RedlineFactory("loxVenturi", loxVenturiSelector, 0, 150),
            RedlineFactory("kerVenturi", kerVenturiSelector, 0, 10),
            RedlineFactory("loadCell", loadCellSelector, 0, 30),
            RedlineFactory("pneumaticDucer", pneumaticDucerSelector, 90, 140),
            RedlineFactory("loxRegDucer", loxRegDucerSelector, 550, 800),
            RedlineFactory("kerRegDucer", kerRegDucerSelector, 550, 900),
            RedlineFactory("n2pressDucer", n2pressDucerSelector, 1000, 2000),
            RedlineFactory("loxTankTC", loxTankTCSelector, -1000, 1000),
            RedlineFactory("kerInletTC", kerInletTCSelector, -1000, 1000),
            RedlineFactory("kerOutletTC", kerOutletTCSelector, -1000, 1000),
            RedlineFactory("miscTC", miscTCSelector, -1000, 1000),
            RedlineFactory("loxVent", loxVentSelector, ECSValveState::CLOSED),
            RedlineFactory("loxPressurant", loxPressurantSelector, ECSValveState::OPEN),
            RedlineFactory("loxFlow", loxFlowSelector, ECSValveState::OPEN),
            RedlineFactory("loxPurge", loxPurgeSelector, ECSValveState::CLOSED),
            RedlineFactory("kerVent", kerVentSelector, ECSValveState::CLOSED),
            RedlineFactory("kerPressurant", kerPressurantSelector, ECSValveState::OPEN),
            RedlineFactory("kerFlow", kerFlowSelector, ECSValveState::CLOSED),
            RedlineFactory("kerPurge", kerPurgeSelector, ECSValveState::CLOSED));
}
const ECSState LOX_FLOW = ECSState("LOX_FLOW", std::move(LOX_FLOWRedlines), LOX_FLOWConfig, LOX_FLOWConfig);

namespace {
    CommandData KER_FLOWConfig = CommandData(ECSValveState::CLOSED,
                                             ECSValveState::OPEN,
                                             ECSValveState::CLOSED,
                                             ECSValveState::CLOSED,
                                             ECSValveState::CLOSED,
                                             ECSValveState::OPEN,
                                             ECSValveState::OPEN,
                                             ECSValveState::CLOSED);
    std::vector<std::unique_ptr<IRedline>> KER_FLOWRedlines = make_vector_unique<IRedline>(
            RedlineFactory("loxTankDucer", loxTankDucerSelector, 0, 800),
            RedlineFactory("kerTankDucer", kerTankDucerSelector, 550, 900),
            RedlineFactory("purgeDucer", purgeDucerSelector, 200, 500),
            RedlineFactory("loxInletDucer", loxInletDucerSelector, 0, 50),
            RedlineFactory("kerInletDucer", kerInletDucerSelector, 550, 900),
            RedlineFactory("kerPintleDucer", kerPintleDucerSelector, 550, 900),
            RedlineFactory("loxVenturi", loxVenturiSelector, 0, 10),
            RedlineFactory("kerVenturi", kerVenturiSelector, 0, 150),
            RedlineFactory("loadCell", loadCellSelector, 0, 30),
            RedlineFactory("pneumaticDucer", pneumaticDucerSelector, 90, 140),
            RedlineFactory("loxRegDucer", loxRegDucerSelector, 550, 800),
            RedlineFactory("kerRegDucer", kerRegDucerSelector, 550, 900),
            RedlineFactory("n2pressDucer", n2pressDucerSelector, 1000, 2000),
            RedlineFactory("loxTankTC", loxTankTCSelector, -1000, 1000),
            RedlineFactory("kerInletTC", kerInletTCSelector, -1000, 1000),
            RedlineFactory("kerOutletTC", kerOutletTCSelector, -1000, 1000),
            RedlineFactory("miscTC", miscTCSelector, -1000, 1000),
            RedlineFactory("loxVent", loxVentSelector, ECSValveState::CLOSED),
            RedlineFactory("loxPressurant", loxPressurantSelector, ECSValveState::OPEN),
            RedlineFactory("loxFlow", loxFlowSelector, ECSValveState::CLOSED),
            RedlineFactory("loxPurge", loxPurgeSelector, ECSValveState::CLOSED),
            RedlineFactory("kerVent", kerVentSelector, ECSValveState::CLOSED),
            RedlineFactory("kerPressurant", kerPressurantSelector, ECSValveState::OPEN),
            RedlineFactory("kerFlow", kerFlowSelector, ECSValveState::OPEN),
            RedlineFactory("kerPurge", kerPurgeSelector, ECSValveState::CLOSED));
}
const ECSState KER_FLOW = ECSState("KER_FLOW", std::move(KER_FLOWRedlines), KER_FLOWConfig, KER_FLOWConfig);

namespace {
    CommandData LOX_GRAV_FLOWConfig = CommandData(ECSValveState::CLOSED,
                                                  ECSValveState::CLOSED,
                                                  ECSValveState::OPEN,
                                                  ECSValveState::CLOSED,
                                                  ECSValveState::CLOSED,
                                                  ECSValveState::CLOSED,
                                                  ECSValveState::CLOSED,
                                                  ECSValveState::CLOSED);
    std::vector<std::unique_ptr<IRedline>> LOX_GRAV_FLOWRedlines = make_vector_unique<IRedline>(
            RedlineFactory("loxTankDucer", loxTankDucerSelector, 0, 800),
            RedlineFactory("kerTankDucer", kerTankDucerSelector, 0, 900),
            RedlineFactory("purgeDucer", purgeDucerSelector, 200, 500),
            RedlineFactory("loxInletDucer", loxInletDucerSelector, 0, 200),
            RedlineFactory("kerInletDucer", kerInletDucerSelector, 0, 50),
            RedlineFactory("kerPintleDucer", kerPintleDucerSelector, 0, 50),
            RedlineFactory("loxVenturi", loxVenturiSelector, 0, 80),
            RedlineFactory("kerVenturi", kerVenturiSelector, 0, 10),
            RedlineFactory("loadCell", loadCellSelector, 0, 30),
            RedlineFactory("pneumaticDucer", pneumaticDucerSelector, 90, 140),
            RedlineFactory("loxRegDucer", loxRegDucerSelector, 0, 800),
            RedlineFactory("kerRegDucer", kerRegDucerSelector, 0, 900),
            RedlineFactory("n2pressDucer", n2pressDucerSelector, 1000, 2000),
            RedlineFactory("loxTankTC", loxTankTCSelector, -1000, 1000),
            RedlineFactory("kerInletTC", kerInletTCSelector, -1000, 1000),
            RedlineFactory("kerOutletTC", kerOutletTCSelector, -1000, 1000),
            RedlineFactory("miscTC", miscTCSelector, -1000, 1000),
            RedlineFactory("loxVent", loxVentSelector, ECSValveState::CLOSED),
            RedlineFactory("loxPressurant", loxPressurantSelector, ECSValveState::CLOSED),
            RedlineFactory("loxFlow", loxFlowSelector, ECSValveState::OPEN),
            RedlineFactory("loxPurge", loxPurgeSelector, ECSValveState::CLOSED),
            RedlineFactory("kerVent", kerVentSelector, ECSValveState::CLOSED),
            RedlineFactory("kerPressurant", kerPressurantSelector, ECSValveState::CLOSED),
            RedlineFactory("kerFlow", kerFlowSelector, ECSValveState::CLOSED),
            RedlineFactory("kerPurge", kerPurgeSelector, ECSValveState::CLOSED));
}
const ECSState LOX_GRAV_FLOW = ECSState("LOX_GRAV_FLOW", std::move(LOX_GRAV_FLOWRedlines), LOX_GRAV_FLOWConfig, LOX_GRAV_FLOWConfig);

namespace {
    CommandData LOX_ENGINE_PURGEConfig = CommandData(ECSValveState::CLOSED,
                                                     ECSValveState::CLOSED,
                                                     ECSValveState::CLOSED,
                                                     ECSValveState::OPEN,
                                                     ECSValveState::CLOSED,
                                                     ECSValveState::CLOSED,
                                                     ECSValveState::CLOSED,
                                                     ECSValveState::CLOSED);
    std::vector<std::unique_ptr<IRedline>> LOX_ENGINE_PURGERedlines = make_vector_unique<IRedline>(
            RedlineFactory("loxTankDucer", loxTankDucerSelector, 0, 800),
            RedlineFactory("kerTankDucer", kerTankDucerSelector, 0, 900),
            RedlineFactory("purgeDucer", purgeDucerSelector, 200, 500),
            RedlineFactory("loxInletDucer", loxInletDucerSelector, 0, 350),
            RedlineFactory("kerInletDucer", kerInletDucerSelector, 0, 50),
            RedlineFactory("kerPintleDucer", kerPintleDucerSelector, 0, 50),
            RedlineFactory("loxVenturi", loxVenturiSelector, 0, 10),
            RedlineFactory("kerVenturi", kerVenturiSelector, 0, 10),
            RedlineFactory("loadCell", loadCellSelector, 0, 30),
            RedlineFactory("pneumaticDucer", pneumaticDucerSelector, 90, 140),
            RedlineFactory("loxRegDucer", loxRegDucerSelector, 0, 800),
            RedlineFactory("kerRegDucer", kerRegDucerSelector, 0, 900),
            RedlineFactory("n2pressDucer", n2pressDucerSelector, 1000, 2000),
            RedlineFactory("loxTankTC", loxTankTCSelector, -1000, 1000),
            RedlineFactory("kerInletTC", kerInletTCSelector, -1000, 1000),
            RedlineFactory("kerOutletTC", kerOutletTCSelector, -1000, 1000),
            RedlineFactory("miscTC", miscTCSelector, -1000, 1000),
            RedlineFactory("loxVent", loxVentSelector, ECSValveState::CLOSED),
            RedlineFactory("loxPressurant", loxPressurantSelector, ECSValveState::CLOSED),
            RedlineFactory("loxFlow", loxFlowSelector, ECSValveState::CLOSED),
            RedlineFactory("loxPurge", loxPurgeSelector, ECSValveState::OPEN),
            RedlineFactory("kerVent", kerVentSelector, ECSValveState::CLOSED),
            RedlineFactory("kerPressurant", kerPressurantSelector, ECSValveState::CLOSED),
            RedlineFactory("kerFlow", kerFlowSelector, ECSValveState::CLOSED),
            RedlineFactory("kerPurge", kerPurgeSelector, ECSValveState::CLOSED));
}
const ECSState LOX_ENGINE_PURGE = ECSState("LOX_ENGINE_PURGE", std::move(LOX_ENGINE_PURGERedlines), LOX_ENGINE_PURGEConfig, LOX_ENGINE_PURGEConfig);

namespace {
    CommandData KER_ENGINE_PURGEConfig = CommandData(ECSValveState::CLOSED,
                                                     ECSValveState::CLOSED,
                                                     ECSValveState::CLOSED,
                                                     ECSValveState::CLOSED,
                                                     ECSValveState::CLOSED,
                                                     ECSValveState::CLOSED,
                                                     ECSValveState::CLOSED,
                                                     ECSValveState::OPEN);
    std::vector<std::unique_ptr<IRedline>> KER_ENGINE_PURGERedlines = make_vector_unique<IRedline>(
            RedlineFactory("loxTankDucer", loxTankDucerSelector, 0, 800),
            RedlineFactory("kerTankDucer", kerTankDucerSelector, 0, 900),
            RedlineFactory("purgeDucer", purgeDucerSelector, 200, 500),
            RedlineFactory("loxInletDucer", loxInletDucerSelector, 0, 50),
            RedlineFactory("kerInletDucer", kerInletDucerSelector, 0, 350),
            RedlineFactory("kerPintleDucer", kerPintleDucerSelector, 0, 350),
            RedlineFactory("loxVenturi", loxVenturiSelector, 0, 10),
            RedlineFactory("kerVenturi", kerVenturiSelector, 0, 10),
            RedlineFactory("loadCell", loadCellSelector, 0, 30),
            RedlineFactory("pneumaticDucer", pneumaticDucerSelector, 90, 140),
            RedlineFactory("loxRegDucer", loxRegDucerSelector, 0, 800),
            RedlineFactory("kerRegDucer", kerRegDucerSelector, 0, 900),
            RedlineFactory("n2pressDucer", n2pressDucerSelector, 1000, 2000),
            RedlineFactory("loxTankTC", loxTankTCSelector, -1000, 1000),
            RedlineFactory("kerInletTC", kerInletTCSelector, -1000, 1000),
            RedlineFactory("kerOutletTC", kerOutletTCSelector, -1000, 1000),
            RedlineFactory("miscTC", miscTCSelector, -1000, 1000),
            RedlineFactory("loxVent", loxVentSelector, ECSValveState::CLOSED),
            RedlineFactory("loxPressurant", loxPressurantSelector, ECSValveState::CLOSED),
            RedlineFactory("loxFlow", loxFlowSelector, ECSValveState::CLOSED),
            RedlineFactory("loxPurge", loxPurgeSelector, ECSValveState::CLOSED),
            RedlineFactory("kerVent", kerVentSelector, ECSValveState::CLOSED),
            RedlineFactory("kerPressurant", kerPressurantSelector, ECSValveState::CLOSED),
            RedlineFactory("kerFlow", kerFlowSelector, ECSValveState::CLOSED),
            RedlineFactory("kerPurge", kerPurgeSelector, ECSValveState::OPEN));
}
const ECSState KER_ENGINE_PURGE = ECSState("KER_ENGINE_PURGE", std::move(KER_ENGINE_PURGERedlines), KER_ENGINE_PURGEConfig, KER_ENGINE_PURGEConfig);

namespace {
    CommandData ALL_ENGINE_PURGEConfig = CommandData(ECSValveState::CLOSED,
                                                     ECSValveState::CLOSED,
                                                     ECSValveState::CLOSED,
                                                     ECSValveState::OPEN,
                                                     ECSValveState::CLOSED,
                                                     ECSValveState::CLOSED,
                                                     ECSValveState::CLOSED,
                                                     ECSValveState::OPEN);
    std::vector<std::unique_ptr<IRedline>> ALL_ENGINE_PURGERedlines = make_vector_unique<IRedline>(
            RedlineFactory("loxTankDucer", loxTankDucerSelector, 0, 800),
            RedlineFactory("kerTankDucer", kerTankDucerSelector, 0, 900),
            RedlineFactory("purgeDucer", purgeDucerSelector, 200, 500),
            RedlineFactory("loxInletDucer", loxInletDucerSelector, 0, 350),
            RedlineFactory("kerInletDucer", kerInletDucerSelector, 0, 350),
            RedlineFactory("kerPintleDucer", kerPintleDucerSelector, 0, 350),
            RedlineFactory("loxVenturi", loxVenturiSelector, 0, 10),
            RedlineFactory("kerVenturi", kerVenturiSelector, 0, 10),
            RedlineFactory("loadCell", loadCellSelector, 0, 30),
            RedlineFactory("pneumaticDucer", pneumaticDucerSelector, 90, 140),
            RedlineFactory("loxRegDucer", loxRegDucerSelector, 0, 800),
            RedlineFactory("kerRegDucer", kerRegDucerSelector, 0, 900),
            RedlineFactory("n2pressDucer", n2pressDucerSelector, 1000, 2000),
            RedlineFactory("loxTankTC", loxTankTCSelector, -1000, 1000),
            RedlineFactory("kerInletTC", kerInletTCSelector, -1000, 1000),
            RedlineFactory("kerOutletTC", kerOutletTCSelector, -1000, 1000),
            RedlineFactory("miscTC", miscTCSelector, -1000, 1000),
            RedlineFactory("loxVent", loxVentSelector, ECSValveState::CLOSED),
            RedlineFactory("loxPressurant", loxPressurantSelector, ECSValveState::CLOSED),
            RedlineFactory("loxFlow", loxFlowSelector, ECSValveState::CLOSED),
            RedlineFactory("loxPurge", loxPurgeSelector, ECSValveState::OPEN),
            RedlineFactory("kerVent", kerVentSelector, ECSValveState::CLOSED),
            RedlineFactory("kerPressurant", kerPressurantSelector, ECSValveState::CLOSED),
            RedlineFactory("kerFlow", kerFlowSelector, ECSValveState::CLOSED),
            RedlineFactory("kerPurge", kerPurgeSelector, ECSValveState::OPEN));
}
const ECSState ALL_ENGINE_PURGE = ECSState("ALL_ENGINE_PURGE", std::move(ALL_ENGINE_PURGERedlines), ALL_ENGINE_PURGEConfig, ALL_ENGINE_PURGEConfig);

namespace {
    CommandData PRESSURIZED_ALL_ENGINE_PURGEConfig = CommandData(ECSValveState::CLOSED,
                                                                 ECSValveState::OPEN,
                                                                 ECSValveState::CLOSED,
                                                                 ECSValveState::OPEN,
                                                                 ECSValveState::CLOSED,
                                                                 ECSValveState::OPEN,
                                                                 ECSValveState::CLOSED,
                                                                 ECSValveState::OPEN);
    std::vector<std::unique_ptr<IRedline>> PRESSURIZED_ALL_ENGINE_PURGERedlines = make_vector_unique<IRedline>(
            RedlineFactory("loxTankDucer", loxTankDucerSelector, 550, 800),
            RedlineFactory("kerTankDucer", kerTankDucerSelector, 550, 900),
            RedlineFactory("purgeDucer", purgeDucerSelector, 200, 500),
            RedlineFactory("loxInletDucer", loxInletDucerSelector, 0, 350),
            RedlineFactory("kerInletDucer", kerInletDucerSelector, 0, 350),
            RedlineFactory("kerPintleDucer", kerPintleDucerSelector, 0, 350),
            RedlineFactory("loxVenturi", loxVenturiSelector, 0, 10),
            RedlineFactory("kerVenturi", kerVenturiSelector, 0, 10),
            RedlineFactory("loadCell", loadCellSelector, 0, 30),
            RedlineFactory("pneumaticDucer", pneumaticDucerSelector, 90, 140),
            RedlineFactory("loxRegDucer", loxRegDucerSelector, 550, 800),
            RedlineFactory("kerRegDucer", kerRegDucerSelector, 550, 900),
            RedlineFactory("n2pressDucer", n2pressDucerSelector, 1000, 2000),
            RedlineFactory("loxTankTC", loxTankTCSelector, -1000, 1000),
            RedlineFactory("kerInletTC", kerInletTCSelector, -1000, 1000),
            RedlineFactory("kerOutletTC", kerOutletTCSelector, -1000, 1000),
            RedlineFactory("miscTC", miscTCSelector, -1000, 1000),
            RedlineFactory("loxVent", loxVentSelector, ECSValveState::CLOSED),
            RedlineFactory("loxPressurant", loxPressurantSelector, ECSValveState::OPEN),
            RedlineFactory("loxFlow", loxFlowSelector, ECSValveState::CLOSED),
            RedlineFactory("loxPurge", loxPurgeSelector, ECSValveState::OPEN),
            RedlineFactory("kerVent", kerVentSelector, ECSValveState::CLOSED),
            RedlineFactory("kerPressurant", kerPressurantSelector, ECSValveState::OPEN),
            RedlineFactory("kerFlow", kerFlowSelector, ECSValveState::CLOSED),
            RedlineFactory("kerPurge", kerPurgeSelector, ECSValveState::OPEN));
}
const ECSState PRESSURIZED_ALL_ENGINE_PURGE = ECSState("PRESSURIZED_ALL_ENGINE_PURGE", std::move(PRESSURIZED_ALL_ENGINE_PURGERedlines), PRESSURIZED_ALL_ENGINE_PURGEConfig, PRESSURIZED_ALL_ENGINE_PURGEConfig);

namespace {
    CommandData LOX_TANK_PURGEConfig = CommandData(ECSValveState::CLOSED,
                                                   ECSValveState::OPEN,
                                                   ECSValveState::OPEN,
                                                   ECSValveState::CLOSED,
                                                   ECSValveState::CLOSED,
                                                   ECSValveState::CLOSED,
                                                   ECSValveState::CLOSED,
                                                   ECSValveState::CLOSED);
    std::vector<std::unique_ptr<IRedline>> LOX_TANK_PURGERedlines = make_vector_unique<IRedline>(
            RedlineFactory("loxTankDucer", loxTankDucerSelector, 550, 800),
            RedlineFactory("kerTankDucer", kerTankDucerSelector, 550, 900),
            RedlineFactory("purgeDucer", purgeDucerSelector, 200, 500),
            RedlineFactory("loxInletDucer", loxInletDucerSelector, 0, 350),
            RedlineFactory("kerInletDucer", kerInletDucerSelector, 0, 50),
            RedlineFactory("kerPintleDucer", kerPintleDucerSelector, 0, 50),
            RedlineFactory("loxVenturi", loxVenturiSelector, 0, 150),
            RedlineFactory("kerVenturi", kerVenturiSelector, 0, 150),
            RedlineFactory("loadCell", loadCellSelector, 0, 30),
            RedlineFactory("pneumaticDucer", pneumaticDucerSelector, 90, 140),
            RedlineFactory("loxRegDucer", loxRegDucerSelector, 550, 800),
            RedlineFactory("kerRegDucer", kerRegDucerSelector, 550, 900),
            RedlineFactory("n2pressDucer", n2pressDucerSelector, 1000, 2000),
            RedlineFactory("loxTankTC", loxTankTCSelector, -1000, 1000),
            RedlineFactory("kerInletTC", kerInletTCSelector, -1000, 1000),
            RedlineFactory("kerOutletTC", kerOutletTCSelector, -1000, 1000),
            RedlineFactory("miscTC", miscTCSelector, -1000, 1000),
            RedlineFactory("loxVent", loxVentSelector, ECSValveState::CLOSED),
            RedlineFactory("loxPressurant", loxPressurantSelector, ECSValveState::OPEN),
            RedlineFactory("loxFlow", loxFlowSelector, ECSValveState::OPEN),
            RedlineFactory("loxPurge", loxPurgeSelector, ECSValveState::CLOSED),
            RedlineFactory("kerVent", kerVentSelector, ECSValveState::CLOSED),
            RedlineFactory("kerPressurant", kerPressurantSelector, ECSValveState::CLOSED),
            RedlineFactory("kerFlow", kerFlowSelector, ECSValveState::CLOSED),
            RedlineFactory("kerPurge", kerPurgeSelector, ECSValveState::CLOSED));
}
const ECSState LOX_TANK_PURGE = ECSState("LOX_TANK_PURGE", std::move(LOX_TANK_PURGERedlines), LOX_TANK_PURGEConfig, LOX_TANK_PURGEConfig);

namespace {
    CommandData KER_TANK_PURGEConfig = CommandData(ECSValveState::CLOSED,
                                                   ECSValveState::CLOSED,
                                                   ECSValveState::CLOSED,
                                                   ECSValveState::CLOSED,
                                                   ECSValveState::CLOSED,
                                                   ECSValveState::OPEN,
                                                   ECSValveState::OPEN,
                                                   ECSValveState::CLOSED);
    std::vector<std::unique_ptr<IRedline>> KER_TANK_PURGERedlines = make_vector_unique<IRedline>(
            RedlineFactory("loxTankDucer", loxTankDucerSelector, 550, 800),
            RedlineFactory("kerTankDucer", kerTankDucerSelector, 550, 900),
            RedlineFactory("purgeDucer", purgeDucerSelector, 200, 500),
            RedlineFactory("loxInletDucer", loxInletDucerSelector, 0, 50),
            RedlineFactory("kerInletDucer", kerInletDucerSelector, 0, 350),
            RedlineFactory("kerPintleDucer", kerPintleDucerSelector, 0, 350),
            RedlineFactory("loxVenturi", loxVenturiSelector, 0, 150),
            RedlineFactory("kerVenturi", kerVenturiSelector, 0, 150),
            RedlineFactory("loadCell", loadCellSelector, 0, 30),
            RedlineFactory("pneumaticDucer", pneumaticDucerSelector, 90, 140),
            RedlineFactory("loxRegDucer", loxRegDucerSelector, 550, 800),
            RedlineFactory("kerRegDucer", kerRegDucerSelector, 550, 900),
            RedlineFactory("n2pressDucer", n2pressDucerSelector, 1000, 2000),
            RedlineFactory("loxTankTC", loxTankTCSelector, -1000, 1000),
            RedlineFactory("kerInletTC", kerInletTCSelector, -1000, 1000),
            RedlineFactory("kerOutletTC", kerOutletTCSelector, -1000, 1000),
            RedlineFactory("miscTC", miscTCSelector, -1000, 1000),
            RedlineFactory("loxVent", loxVentSelector, ECSValveState::CLOSED),
            RedlineFactory("loxPressurant", loxPressurantSelector, ECSValveState::CLOSED),
            RedlineFactory("loxFlow", loxFlowSelector, ECSValveState::CLOSED),
            RedlineFactory("loxPurge", loxPurgeSelector, ECSValveState::CLOSED),
            RedlineFactory("kerVent", kerVentSelector, ECSValveState::CLOSED),
            RedlineFactory("kerPressurant", kerPressurantSelector, ECSValveState::OPEN),
            RedlineFactory("kerFlow", kerFlowSelector, ECSValveState::OPEN),
            RedlineFactory("kerPurge", kerPurgeSelector, ECSValveState::CLOSED));
}
const ECSState KER_TANK_PURGE = ECSState("KER_TANK_PURGE", std::move(KER_TANK_PURGERedlines), KER_TANK_PURGEConfig, KER_TANK_PURGEConfig);

namespace {
    CommandData ALL_TANK_PURGEConfig = CommandData(ECSValveState::CLOSED,
                                                   ECSValveState::OPEN,
                                                   ECSValveState::OPEN,
                                                   ECSValveState::CLOSED,
                                                   ECSValveState::CLOSED,
                                                   ECSValveState::OPEN,
                                                   ECSValveState::OPEN,
                                                   ECSValveState::CLOSED);
    std::vector<std::unique_ptr<IRedline>> ALL_TANK_PURGERedlines = make_vector_unique<IRedline>(
            RedlineFactory("loxTankDucer", loxTankDucerSelector, 550, 800),
            RedlineFactory("kerTankDucer", kerTankDucerSelector, 550, 900),
            RedlineFactory("purgeDucer", purgeDucerSelector, 200, 500),
            RedlineFactory("loxInletDucer", loxInletDucerSelector, 0, 350),
            RedlineFactory("kerInletDucer", kerInletDucerSelector, 0, 350),
            RedlineFactory("kerPintleDucer", kerPintleDucerSelector, 0, 350),
            RedlineFactory("loxVenturi", loxVenturiSelector, 0, 150),
            RedlineFactory("kerVenturi", kerVenturiSelector, 0, 150),
            RedlineFactory("loadCell", loadCellSelector, 0, 30),
            RedlineFactory("pneumaticDucer", pneumaticDucerSelector, 90, 140),
            RedlineFactory("loxRegDucer", loxRegDucerSelector, 550, 800),
            RedlineFactory("kerRegDucer", kerRegDucerSelector, 550, 900),
            RedlineFactory("n2pressDucer", n2pressDucerSelector, 1000, 2000),
            RedlineFactory("loxTankTC", loxTankTCSelector, -1000, 1000),
            RedlineFactory("kerInletTC", kerInletTCSelector, -1000, 1000),
            RedlineFactory("kerOutletTC", kerOutletTCSelector, -1000, 1000),
            RedlineFactory("miscTC", miscTCSelector, -1000, 1000),
            RedlineFactory("loxVent", loxVentSelector, ECSValveState::CLOSED),
            RedlineFactory("loxPressurant", loxPressurantSelector, ECSValveState::OPEN),
            RedlineFactory("loxFlow", loxFlowSelector, ECSValveState::OPEN),
            RedlineFactory("loxPurge", loxPurgeSelector, ECSValveState::CLOSED),
            RedlineFactory("kerVent", kerVentSelector, ECSValveState::CLOSED),
            RedlineFactory("kerPressurant", kerPressurantSelector, ECSValveState::OPEN),
            RedlineFactory("kerFlow", kerFlowSelector, ECSValveState::OPEN),
            RedlineFactory("kerPurge", kerPurgeSelector, ECSValveState::CLOSED));
}
const ECSState ALL_TANK_PURGE = ECSState("ALL_TANK_PURGE", std::move(ALL_TANK_PURGERedlines), ALL_TANK_PURGEConfig, ALL_TANK_PURGEConfig);

namespace {
    CommandData LOX_FLUTTER_CLOSEDConfig = CommandData(ECSValveState::CLOSED,
                                                       ECSValveState::OPEN,
                                                       ECSValveState::CLOSED,
                                                       ECSValveState::CLOSED,
                                                       ECSValveState::CLOSED,
                                                       ECSValveState::CLOSED,
                                                       ECSValveState::CLOSED,
                                                       ECSValveState::CLOSED);
    std::vector<std::unique_ptr<IRedline>> LOX_FLUTTER_CLOSEDRedlines = make_vector_unique<IRedline>(
            RedlineFactory("loxTankDucer", loxTankDucerSelector, 550, 800),
            RedlineFactory("kerTankDucer", kerTankDucerSelector, 0, 900),
            RedlineFactory("purgeDucer", purgeDucerSelector, 200, 500),
            RedlineFactory("loxInletDucer", loxInletDucerSelector, 0, 30),
            RedlineFactory("kerInletDucer", kerInletDucerSelector, 0, 30),
            RedlineFactory("kerPintleDucer", kerPintleDucerSelector, 0, 30),
            RedlineFactory("loxVenturi", loxVenturiSelector, 0, 10),
            RedlineFactory("kerVenturi", kerVenturiSelector, 0, 10),
            RedlineFactory("loadCell", loadCellSelector, 0, 30),
            RedlineFactory("pneumaticDucer", pneumaticDucerSelector, 90, 140),
            RedlineFactory("loxRegDucer", loxRegDucerSelector, 550, 800),
            RedlineFactory("kerRegDucer", kerRegDucerSelector, 550, 900),
            RedlineFactory("n2pressDucer", n2pressDucerSelector, 1000, 2000),
            RedlineFactory("loxTankTC", loxTankTCSelector, -1000, 1000),
            RedlineFactory("kerInletTC", kerInletTCSelector, -1000, 1000),
            RedlineFactory("kerOutletTC", kerOutletTCSelector, -1000, 1000),
            RedlineFactory("miscTC", miscTCSelector, -1000, 1000),
            RedlineFactory("loxVent", loxVentSelector, ECSValveState::CLOSED),
            RedlineFactory("loxPressurant", loxPressurantSelector, ECSValveState::OPEN),
            RedlineFactory("loxFlow", loxFlowSelector, ECSValveState::CLOSED),
            RedlineFactory("loxPurge", loxPurgeSelector, ECSValveState::CLOSED),
            RedlineFactory("kerVent", kerVentSelector, ECSValveState::CLOSED),
            RedlineFactory("kerPressurant", kerPressurantSelector, ECSValveState::CLOSED),
            RedlineFactory("kerFlow", kerFlowSelector, ECSValveState::CLOSED),
            RedlineFactory("kerPurge", kerPurgeSelector, ECSValveState::CLOSED));
}
const ECSState LOX_FLUTTER_CLOSED = ECSState("LOX_FLUTTER_CLOSED", std::move(LOX_FLUTTER_CLOSEDRedlines), LOX_FLUTTER_CLOSEDConfig, LOX_FLUTTER_CLOSEDConfig);

namespace {
    CommandData LOX_FLUTTER_OPENConfig = CommandData(ECSValveState::OPEN,
                                                     ECSValveState::OPEN,
                                                     ECSValveState::CLOSED,
                                                     ECSValveState::CLOSED,
                                                     ECSValveState::CLOSED,
                                                     ECSValveState::CLOSED,
                                                     ECSValveState::CLOSED,
                                                     ECSValveState::CLOSED);
    std::vector<std::unique_ptr<IRedline>> LOX_FLUTTER_OPENRedlines = make_vector_unique<IRedline>(
            RedlineFactory("loxTankDucer", loxTankDucerSelector, 550, 800),
            RedlineFactory("kerTankDucer", kerTankDucerSelector, 0, 900),
            RedlineFactory("purgeDucer", purgeDucerSelector, 200, 500),
            RedlineFactory("loxInletDucer", loxInletDucerSelector, 0, 30),
            RedlineFactory("kerInletDucer", kerInletDucerSelector, 0, 30),
            RedlineFactory("kerPintleDucer", kerPintleDucerSelector, 0, 30),
            RedlineFactory("loxVenturi", loxVenturiSelector, 0, 10),
            RedlineFactory("kerVenturi", kerVenturiSelector, 0, 10),
            RedlineFactory("loadCell", loadCellSelector, 0, 30),
            RedlineFactory("pneumaticDucer", pneumaticDucerSelector, 90, 140),
            RedlineFactory("loxRegDucer", loxRegDucerSelector, 550, 800),
            RedlineFactory("kerRegDucer", kerRegDucerSelector, 550, 900),
            RedlineFactory("n2pressDucer", n2pressDucerSelector, 1000, 2000),
            RedlineFactory("loxTankTC", loxTankTCSelector, -1000, 1000),
            RedlineFactory("kerInletTC", kerInletTCSelector, -1000, 1000),
            RedlineFactory("kerOutletTC", kerOutletTCSelector, -1000, 1000),
            RedlineFactory("miscTC", miscTCSelector, -1000, 1000),
            RedlineFactory("loxVent", loxVentSelector, ECSValveState::OPEN),
            RedlineFactory("loxPressurant", loxPressurantSelector, ECSValveState::OPEN),
            RedlineFactory("loxFlow", loxFlowSelector, ECSValveState::CLOSED),
            RedlineFactory("loxPurge", loxPurgeSelector, ECSValveState::CLOSED),
            RedlineFactory("kerVent", kerVentSelector, ECSValveState::CLOSED),
            RedlineFactory("kerPressurant", kerPressurantSelector, ECSValveState::CLOSED),
            RedlineFactory("kerFlow", kerFlowSelector, ECSValveState::CLOSED),
            RedlineFactory("kerPurge", kerPurgeSelector, ECSValveState::CLOSED));
}
const ECSState LOX_FLUTTER_OPEN = ECSState("LOX_FLUTTER_OPEN", std::move(LOX_FLUTTER_OPENRedlines), LOX_FLUTTER_OPENConfig, LOX_FLUTTER_OPENConfig);

namespace {
    CommandData KER_FLUTTER_CLOSEDConfig = CommandData(ECSValveState::CLOSED,
                                                       ECSValveState::CLOSED,
                                                       ECSValveState::CLOSED,
                                                       ECSValveState::CLOSED,
                                                       ECSValveState::CLOSED,
                                                       ECSValveState::OPEN,
                                                       ECSValveState::CLOSED,
                                                       ECSValveState::CLOSED);
    std::vector<std::unique_ptr<IRedline>> KER_FLUTTER_CLOSEDRedlines = make_vector_unique<IRedline>(
            RedlineFactory("loxTankDucer", loxTankDucerSelector, 0, 800),
            RedlineFactory("kerTankDucer", kerTankDucerSelector, 550, 900),
            RedlineFactory("purgeDucer", purgeDucerSelector, 200, 500),
            RedlineFactory("loxInletDucer", loxInletDucerSelector, 0, 30),
            RedlineFactory("kerInletDucer", kerInletDucerSelector, 0, 30),
            RedlineFactory("kerPintleDucer", kerPintleDucerSelector, 0, 30),
            RedlineFactory("loxVenturi", loxVenturiSelector, 0, 10),
            RedlineFactory("kerVenturi", kerVenturiSelector, 0, 10),
            RedlineFactory("loadCell", loadCellSelector, 0, 30),
            RedlineFactory("pneumaticDucer", pneumaticDucerSelector, 90, 140),
            RedlineFactory("loxRegDucer", loxRegDucerSelector, 550, 800),
            RedlineFactory("kerRegDucer", kerRegDucerSelector, 550, 900),
            RedlineFactory("n2pressDucer", n2pressDucerSelector, 1000, 2000),
            RedlineFactory("loxTankTC", loxTankTCSelector, -1000, 1000),
            RedlineFactory("kerInletTC", kerInletTCSelector, -1000, 1000),
            RedlineFactory("kerOutletTC", kerOutletTCSelector, -1000, 1000),
            RedlineFactory("miscTC", miscTCSelector, -1000, 1000),
            RedlineFactory("loxVent", loxVentSelector, ECSValveState::CLOSED),
            RedlineFactory("loxPressurant", loxPressurantSelector, ECSValveState::CLOSED),
            RedlineFactory("loxFlow", loxFlowSelector, ECSValveState::CLOSED),
            RedlineFactory("loxPurge", loxPurgeSelector, ECSValveState::CLOSED),
            RedlineFactory("kerVent", kerVentSelector, ECSValveState::CLOSED),
            RedlineFactory("kerPressurant", kerPressurantSelector, ECSValveState::OPEN),
            RedlineFactory("kerFlow", kerFlowSelector, ECSValveState::CLOSED),
            RedlineFactory("kerPurge", kerPurgeSelector, ECSValveState::CLOSED));
}
const ECSState KER_FLUTTER_CLOSED = ECSState("KER_FLUTTER_CLOSED", std::move(KER_FLUTTER_CLOSEDRedlines), KER_FLUTTER_CLOSEDConfig, KER_FLUTTER_CLOSEDConfig);

namespace {
    CommandData KER_FLUTTER_OPENConfig = CommandData(ECSValveState::CLOSED,
                                                     ECSValveState::CLOSED,
                                                     ECSValveState::CLOSED,
                                                     ECSValveState::CLOSED,
                                                     ECSValveState::OPEN,
                                                     ECSValveState::OPEN,
                                                     ECSValveState::CLOSED,
                                                     ECSValveState::CLOSED);
    std::vector<std::unique_ptr<IRedline>> KER_FLUTTER_OPENRedlines = make_vector_unique<IRedline>(
            RedlineFactory("loxTankDucer", loxTankDucerSelector, 0, 800),
            RedlineFactory("kerTankDucer", kerTankDucerSelector, 550, 900),
            RedlineFactory("purgeDucer", purgeDucerSelector, 200, 500),
            RedlineFactory("loxInletDucer", loxInletDucerSelector, 0, 30),
            RedlineFactory("kerInletDucer", kerInletDucerSelector, 0, 30),
            RedlineFactory("kerPintleDucer", kerPintleDucerSelector, 0, 30),
            RedlineFactory("loxVenturi", loxVenturiSelector, 0, 10),
            RedlineFactory("kerVenturi", kerVenturiSelector, 0, 10),
            RedlineFactory("loadCell", loadCellSelector, 0, 30),
            RedlineFactory("pneumaticDucer", pneumaticDucerSelector, 90, 140),
            RedlineFactory("loxRegDucer", loxRegDucerSelector, 550, 800),
            RedlineFactory("kerRegDucer", kerRegDucerSelector, 550, 900),
            RedlineFactory("n2pressDucer", n2pressDucerSelector, 1000, 2000),
            RedlineFactory("loxTankTC", loxTankTCSelector, -1000, 1000),
            RedlineFactory("kerInletTC", kerInletTCSelector, -1000, 1000),
            RedlineFactory("kerOutletTC", kerOutletTCSelector, -1000, 1000),
            RedlineFactory("miscTC", miscTCSelector, -1000, 1000),
            RedlineFactory("loxVent", loxVentSelector, ECSValveState::CLOSED),
            RedlineFactory("loxPressurant", loxPressurantSelector, ECSValveState::CLOSED),
            RedlineFactory("loxFlow", loxFlowSelector, ECSValveState::CLOSED),
            RedlineFactory("loxPurge", loxPurgeSelector, ECSValveState::CLOSED),
            RedlineFactory("kerVent", kerVentSelector, ECSValveState::OPEN),
            RedlineFactory("kerPressurant", kerPressurantSelector, ECSValveState::OPEN),
            RedlineFactory("kerFlow", kerFlowSelector, ECSValveState::CLOSED),
            RedlineFactory("kerPurge", kerPurgeSelector, ECSValveState::CLOSED));
}
const ECSState KER_FLUTTER_OPEN = ECSState("KER_FLUTTER_OPEN", std::move(KER_FLUTTER_OPENRedlines), KER_FLUTTER_OPENConfig, KER_FLUTTER_OPENConfig);









/**
 * SEQUENCES ARE CURRENTLY NOT AUTOMATICALLY GENERATED, REFRAIN FROM DELETING THEM
 */
RelatTimedSequence LOX_VENT_FLUTTER_x5{{
    {0, LOX_FLUTTER_CLOSED},
    {500, LOX_FLUTTER_OPEN},
    {500, LOX_FLUTTER_CLOSED},
    {500, LOX_FLUTTER_OPEN},
    {500, LOX_FLUTTER_CLOSED},
    {500, LOX_FLUTTER_OPEN},
    {500, LOX_FLUTTER_CLOSED},
    {500, LOX_FLUTTER_OPEN},
    {500, LOX_FLUTTER_CLOSED},
    {500, LOX_FLUTTER_OPEN},
    {500, ALL_READY_TO_PRESSURIZE}}};

RelatTimedSequence KER_VENT_FLUTTER_x5{{
    {0, KER_FLUTTER_CLOSED},
    {500, KER_FLUTTER_OPEN},
    {500, KER_FLUTTER_CLOSED},
    {500, KER_FLUTTER_OPEN},
    {500, KER_FLUTTER_CLOSED},
    {500, KER_FLUTTER_OPEN},
    {500, KER_FLUTTER_CLOSED},
    {500, KER_FLUTTER_OPEN},
    {500, KER_FLUTTER_CLOSED},
    {500, KER_FLUTTER_OPEN},
    {500, ALL_READY_TO_PRESSURIZE}}};

RelatTimedSequence FIRE_3s{{
    {0, KER_FLOW},
    {150, ALL_FLOW},
    {3000, KER_FLOW},
    {250, KER_ENGINE_PURGE},
    {3000, ALL_ENGINE_PURGE},
    {3000, ALL_READY_TO_PRESSURIZE}}};

RelatTimedSequence FIRE_15s{{
    {0, KER_FLOW},
    {150, ALL_FLOW},
    {15000, KER_FLOW},
    {250, KER_ENGINE_PURGE},
    {3000, ALL_ENGINE_PURGE},
    {3000, ALL_READY_TO_PRESSURIZE}}};

RelatTimedSequence PURGE_ABORT{{
    {0, KER_FLOW},
    {250, KER_ENGINE_PURGE},
    {3000, ALL_ENGINE_PURGE},
    {3000, ALL_READY_TO_PRESSURIZE}}};

RelatTimedSequence NO_PURGE_ABORT{{
    {0, KER_FLOW},
    {1000, ALL_READY_TO_PRESSURIZE}}};

RelatTimedSequence ONLINE_SAFE_ABORT{{
    {0, ONLINE_SAFE}}};