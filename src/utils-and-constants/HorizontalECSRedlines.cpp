//
// Created by kevin on 5/27/2022.
//

#include "utils-and-constants/HorizontalECSRedlines.h"

/*
extern const std::vector<const IRedline*> ONLINE_SAFE_D = {
        //REMOTELY CONTROLLED VALVES
        new ValveRedline("loxVent",
                         [](const SensorData *data) { return data->loxVent; },
                         OPEN),
        new ValveRedline("kerVent",
                         [](const SensorData *data) { return data->kerVent; },
                         OPEN),
        new ValveRedline("loxDrip",
                         [](const SensorData *data) { return data->loxDrip; },
                         OPEN),
        new ValveRedline("kerDrip",
                         [](const SensorData *data) { return data->kerDrip; },
                         OPEN),
        new ValveRedline("loxPressurant",
                         [](const SensorData *data) { return data->loxPressurant; },
                         CLOSED),
        new ValveRedline("kerPressurant",
                         [](const SensorData *data) { return data->kerPressurant; },
                         CLOSED),
        new ValveRedline("loxFlow",
                         [](const SensorData *data) { return data->loxFlow; },
                         CLOSED),
        new ValveRedline("kerFlow",
                         [](const SensorData *data) { return data->kerFlow; },
                         CLOSED),
        new ValveRedline("loxPurge",
                         [](const SensorData *data) { return data->loxPurge; },
                         CLOSED),
        new ValveRedline("kerPurge",
                         [](const SensorData *data) { return data->kerPurge; },
                         CLOSED),
        //PRESSURE SENSORS (psi)
        new IntWithinRedline("loxTankDucer",
                             [](const SensorData *data) { return data->loxTankDucer; },
                             0, 15),
        new IntWithinRedline("kerTankDucer",
                             [](const SensorData *data) { return data->kerTankDucer; },
                             0, 15),
        new IntWithinRedline("purgeDucer",
                             [](const SensorData *data) { return data->purgeDucer; },
                             0, 500),
        new IntWithinRedline("loxInletDucer",
                             [](const SensorData *data) { return data->loxInletDucer; },
                             0, 15),
        new IntWithinRedline("manifoldInletDucer",
                             [](const SensorData *data) { return data->manifoldInletDucer; },
                             0, 15),
        new IntWithinRedline("kerInletDucer",
                             [](const SensorData *data) { return data->kerInletDucer; },
                             0, 15),
        new IntWithinRedline("loxVenturi",
                             [](const SensorData *data) { return data->loxVenturi; },
                             0, 15),
        new IntWithinRedline("kerVenturi",
                             [](const SensorData *data) { return data->kerVenturi; },
                             0, 15),
        //LOADCELL (lbf)
        new IntWithinRedline("loadcell",
                             [](const SensorData *data) { return data->loadCell; },
                             0, 15),
        //TEMP SENSORS (C)
        new IntWithinRedline("loxTank1",
                             [](const SensorData *data) { return data->loxTank1; },
                             20, 30),
        new IntWithinRedline("loxTank2",
                             [](const SensorData *data) { return data->loxTank2; },
                             20, 30),
        new IntWithinRedline("loxTank3",
                             [](const SensorData *data) { return data->loxTank3; },
                             20, 30),
        new IntWithinRedline("loxDripLine",
                             [](const SensorData *data) { return data->loxDripLine; },
                             20, 30),
        new IntWithinRedline("outsideThroat",
                             [](const SensorData *data) { return data->outsideThroat; },
                             20, 30),
        new IntWithinRedline("nozzle",
                             [](const SensorData *data) { return data->nozzle; },
                             20, 30),
        new IntWithinRedline("bhioewihfdsa",
                             [](const SensorData *data) { return data->nozzle; },
                             20, 400, ABORT)
};*/

extern const std::vector<const IRedline *> ONLINE_SAFE_D = {
        new ValveRedline("loxVent in ONLINE_SAFE_D", [](const SensorData *data) { return data->loxVent; },
                         ECSValveState::OPEN),
        new ValveRedline("kerVent in ONLINE_SAFE_D", [](const SensorData *data) { return data->kerVent; },
                         ECSValveState::OPEN),
        new ValveRedline("loxDrip in ONLINE_SAFE_D", [](const SensorData *data) { return data->loxDrip; },
                         ECSValveState::OPEN),
        new ValveRedline("kerDrip in ONLINE_SAFE_D", [](const SensorData *data) { return data->kerDrip; },
                         ECSValveState::OPEN),
        new ValveRedline("loxPressurant in ONLINE_SAFE_D", [](const SensorData *data) { return data->loxPressurant; },
                         ECSValveState::CLOSED),
        new ValveRedline("kerPressurant in ONLINE_SAFE_D", [](const SensorData *data) { return data->kerPressurant; },
                         ECSValveState::CLOSED),
        new ValveRedline("loxFlow in ONLINE_SAFE_D", [](const SensorData *data) { return data->loxFlow; },
                         ECSValveState::CLOSED),
        new ValveRedline("kerFlow in ONLINE_SAFE_D", [](const SensorData *data) { return data->kerFlow; },
                         ECSValveState::CLOSED),
        new ValveRedline("loxPurge in ONLINE_SAFE_D", [](const SensorData *data) { return data->loxPurge; },
                         ECSValveState::CLOSED),
        new ValveRedline("kerPurge in ONLINE_SAFE_D", [](const SensorData *data) { return data->kerPurge; },
                         ECSValveState::CLOSED),
        new IntWithinRedline("loxTankDucer in ONLINE_SAFE_D", [](const SensorData *data) { return data->loxTankDucer; },
                             0, 15),
        new IntWithinRedline("kerTankDucer in ONLINE_SAFE_D", [](const SensorData *data) { return data->kerTankDucer; },
                             0, 15),
        new IntWithinRedline("purgeDucer in ONLINE_SAFE_D", [](const SensorData *data) { return data->purgeDucer; }, 0,
                             500),
        new IntWithinRedline("loxInletDucer in ONLINE_SAFE_D",
                             [](const SensorData *data) { return data->loxInletDucer; }, 0, 15),
        new IntWithinRedline("manifoldInletDucer in ONLINE_SAFE_D",
                             [](const SensorData *data) { return data->manifoldInletDucer; }, 0, 15),
        new IntWithinRedline("kerInletDucer in ONLINE_SAFE_D",
                             [](const SensorData *data) { return data->kerInletDucer; }, 0, 15),
        new IntWithinRedline("loxVenturi in ONLINE_SAFE_D", [](const SensorData *data) { return data->loxVenturi; }, 0,
                             15),
        new IntWithinRedline("kerVenturi in ONLINE_SAFE_D", [](const SensorData *data) { return data->kerVenturi; }, 0,
                             15),
        new IntWithinRedline("loxTank1 in ONLINE_SAFE_D", [](const SensorData *data) { return data->loxTank1; }, 20,
                             30),
        new IntWithinRedline("loxTank2 in ONLINE_SAFE_D", [](const SensorData *data) { return data->loxTank2; }, 20,
                             30),
        new IntWithinRedline("loxTank3 in ONLINE_SAFE_D", [](const SensorData *data) { return data->loxTank3; }, 20,
                             30),
        new IntWithinRedline("loxDripLine in ONLINE_SAFE_D", [](const SensorData *data) { return data->loxDripLine; },
                             20, 30),
        new IntWithinRedline("outsideThroat in ONLINE_SAFE_D",
                             [](const SensorData *data) { return data->outsideThroat; }, 20, 30)};
extern const std::vector<const IRedline *> KERO_FILL = {
        new ValveRedline("loxVent in KERO_FILL", [](const SensorData *data) { return data->loxVent; },
                         ECSValveState::OPEN),
        new ValveRedline("kerVent in KERO_FILL", [](const SensorData *data) { return data->kerVent; },
                         ECSValveState::OPEN),
        new ValveRedline("loxDrip in KERO_FILL", [](const SensorData *data) { return data->loxDrip; },
                         ECSValveState::OPEN),
        new ValveRedline("kerDrip in KERO_FILL", [](const SensorData *data) { return data->kerDrip; },
                         ECSValveState::OPEN),
        new ValveRedline("loxPressurant in KERO_FILL", [](const SensorData *data) { return data->loxPressurant; },
                         ECSValveState::CLOSED),
        new ValveRedline("kerPressurant in KERO_FILL", [](const SensorData *data) { return data->kerPressurant; },
                         ECSValveState::CLOSED),
        new ValveRedline("loxFlow in KERO_FILL", [](const SensorData *data) { return data->loxFlow; },
                         ECSValveState::CLOSED),
        new ValveRedline("kerFlow in KERO_FILL", [](const SensorData *data) { return data->kerFlow; },
                         ECSValveState::CLOSED),
        new ValveRedline("loxPurge in KERO_FILL", [](const SensorData *data) { return data->loxPurge; },
                         ECSValveState::CLOSED),
        new ValveRedline("kerPurge in KERO_FILL", [](const SensorData *data) { return data->kerPurge; },
                         ECSValveState::CLOSED),
        new IntWithinRedline("loxTankDucer in KERO_FILL", [](const SensorData *data) { return data->loxTankDucer; }, 0,
                             15),
        new IntWithinRedline("kerTankDucer in KERO_FILL", [](const SensorData *data) { return data->kerTankDucer; }, 0,
                             15),
        new IntWithinRedline("purgeDucer in KERO_FILL", [](const SensorData *data) { return data->purgeDucer; }, 0,
                             500),
        new IntWithinRedline("loxInletDucer in KERO_FILL", [](const SensorData *data) { return data->loxInletDucer; },
                             0, 15),
        new IntWithinRedline("manifoldInletDucer in KERO_FILL",
                             [](const SensorData *data) { return data->manifoldInletDucer; }, 0, 15),
        new IntWithinRedline("kerInletDucer in KERO_FILL", [](const SensorData *data) { return data->kerInletDucer; },
                             0, 15),
        new IntWithinRedline("loxVenturi in KERO_FILL", [](const SensorData *data) { return data->loxVenturi; }, 0, 15),
        new IntWithinRedline("kerVenturi in KERO_FILL", [](const SensorData *data) { return data->kerVenturi; }, 0,
                             50)};
extern const std::vector<const IRedline *> KERO_FILLED = {
        new ValveRedline("loxVent in KERO_FILLED", [](const SensorData *data) { return data->loxVent; },
                         ECSValveState::OPEN),
        new ValveRedline("kerVent in KERO_FILLED", [](const SensorData *data) { return data->kerVent; },
                         ECSValveState::OPEN),
        new ValveRedline("loxDrip in KERO_FILLED", [](const SensorData *data) { return data->loxDrip; },
                         ECSValveState::OPEN),
        new ValveRedline("kerDrip in KERO_FILLED", [](const SensorData *data) { return data->kerDrip; },
                         ECSValveState::CLOSED),
        new ValveRedline("loxPressurant in KERO_FILLED", [](const SensorData *data) { return data->loxPressurant; },
                         ECSValveState::CLOSED),
        new ValveRedline("kerPressurant in KERO_FILLED", [](const SensorData *data) { return data->kerPressurant; },
                         ECSValveState::CLOSED),
        new ValveRedline("loxFlow in KERO_FILLED", [](const SensorData *data) { return data->loxFlow; },
                         ECSValveState::CLOSED),
        new ValveRedline("kerFlow in KERO_FILLED", [](const SensorData *data) { return data->kerFlow; },
                         ECSValveState::CLOSED),
        new ValveRedline("loxPurge in KERO_FILLED", [](const SensorData *data) { return data->loxPurge; },
                         ECSValveState::CLOSED),
        new ValveRedline("kerPurge in KERO_FILLED", [](const SensorData *data) { return data->kerPurge; },
                         ECSValveState::CLOSED),
        new IntWithinRedline("loxTankDucer in KERO_FILLED", [](const SensorData *data) { return data->loxTankDucer; },
                             0, 15),
        new IntWithinRedline("kerTankDucer in KERO_FILLED", [](const SensorData *data) { return data->kerTankDucer; },
                             0, 15),
        new IntWithinRedline("purgeDucer in KERO_FILLED", [](const SensorData *data) { return data->purgeDucer; }, 0,
                             500),
        new IntWithinRedline("loxInletDucer in KERO_FILLED", [](const SensorData *data) { return data->loxInletDucer; },
                             0, 15),
        new IntWithinRedline("manifoldInletDucer in KERO_FILLED",
                             [](const SensorData *data) { return data->manifoldInletDucer; }, 0, 15),
        new IntWithinRedline("kerInletDucer in KERO_FILLED", [](const SensorData *data) { return data->kerInletDucer; },
                             0, 15),
        new IntWithinRedline("loxVenturi in KERO_FILLED", [](const SensorData *data) { return data->loxVenturi; }, 0,
                             15),
        new IntWithinRedline("kerVenturi in KERO_FILLED", [](const SensorData *data) { return data->kerVenturi; }, 0,
                             15)};
extern const std::vector<const IRedline *> LOX_FILL = {
        new ValveRedline("loxVent in LOX_FILL", [](const SensorData *data) { return data->loxVent; },
                         ECSValveState::OPEN),
        new ValveRedline("kerVent in LOX_FILL", [](const SensorData *data) { return data->kerVent; },
                         ECSValveState::OPEN),
        new ValveRedline("loxDrip in LOX_FILL", [](const SensorData *data) { return data->loxDrip; },
                         ECSValveState::OPEN),
        new ValveRedline("kerDrip in LOX_FILL", [](const SensorData *data) { return data->kerDrip; },
                         ECSValveState::CLOSED),
        new ValveRedline("loxPressurant in LOX_FILL", [](const SensorData *data) { return data->loxPressurant; },
                         ECSValveState::CLOSED),
        new ValveRedline("kerPressurant in LOX_FILL", [](const SensorData *data) { return data->kerPressurant; },
                         ECSValveState::CLOSED),
        new ValveRedline("loxFlow in LOX_FILL", [](const SensorData *data) { return data->loxFlow; },
                         ECSValveState::CLOSED),
        new ValveRedline("kerFlow in LOX_FILL", [](const SensorData *data) { return data->kerFlow; },
                         ECSValveState::CLOSED),
        new ValveRedline("loxPurge in LOX_FILL", [](const SensorData *data) { return data->loxPurge; },
                         ECSValveState::CLOSED),
        new ValveRedline("kerPurge in LOX_FILL", [](const SensorData *data) { return data->kerPurge; },
                         ECSValveState::CLOSED),
        new IntWithinRedline("loxTankDucer in LOX_FILL", [](const SensorData *data) { return data->loxTankDucer; }, 0,
                             15),
        new IntWithinRedline("kerTankDucer in LOX_FILL", [](const SensorData *data) { return data->kerTankDucer; }, 0,
                             15),
        new IntWithinRedline("purgeDucer in LOX_FILL", [](const SensorData *data) { return data->purgeDucer; }, 0, 500),
        new IntWithinRedline("loxInletDucer in LOX_FILL", [](const SensorData *data) { return data->loxInletDucer; }, 0,
                             15),
        new IntWithinRedline("manifoldInletDucer in LOX_FILL",
                             [](const SensorData *data) { return data->manifoldInletDucer; }, 0, 15),
        new IntWithinRedline("kerInletDucer in LOX_FILL", [](const SensorData *data) { return data->kerInletDucer; }, 0,
                             15),
        new IntWithinRedline("loxVenturi in LOX_FILL", [](const SensorData *data) { return data->loxVenturi; }, 0, 50),
        new IntWithinRedline("kerVenturi in LOX_FILL", [](const SensorData *data) { return data->kerVenturi; }, 0, 15)};
extern const std::vector<const IRedline *> LOX_FILLED = {
        new ValveRedline("loxVent in LOX_FILLED", [](const SensorData *data) { return data->loxVent; },
                         ECSValveState::OPEN),
        new ValveRedline("kerVent in LOX_FILLED", [](const SensorData *data) { return data->kerVent; },
                         ECSValveState::OPEN),
        new ValveRedline("loxDrip in LOX_FILLED", [](const SensorData *data) { return data->loxDrip; },
                         ECSValveState::CLOSED),
        new ValveRedline("kerDrip in LOX_FILLED", [](const SensorData *data) { return data->kerDrip; },
                         ECSValveState::CLOSED),
        new ValveRedline("loxPressurant in LOX_FILLED", [](const SensorData *data) { return data->loxPressurant; },
                         ECSValveState::CLOSED),
        new ValveRedline("kerPressurant in LOX_FILLED", [](const SensorData *data) { return data->kerPressurant; },
                         ECSValveState::CLOSED),
        new ValveRedline("loxFlow in LOX_FILLED", [](const SensorData *data) { return data->loxFlow; },
                         ECSValveState::CLOSED),
        new ValveRedline("kerFlow in LOX_FILLED", [](const SensorData *data) { return data->kerFlow; },
                         ECSValveState::CLOSED),
        new ValveRedline("loxPurge in LOX_FILLED", [](const SensorData *data) { return data->loxPurge; },
                         ECSValveState::CLOSED),
        new ValveRedline("kerPurge in LOX_FILLED", [](const SensorData *data) { return data->kerPurge; },
                         ECSValveState::CLOSED),
        new IntWithinRedline("loxTankDucer in LOX_FILLED", [](const SensorData *data) { return data->loxTankDucer; }, 0,
                             15),
        new IntWithinRedline("kerTankDucer in LOX_FILLED", [](const SensorData *data) { return data->kerTankDucer; }, 0,
                             15),
        new IntWithinRedline("purgeDucer in LOX_FILLED", [](const SensorData *data) { return data->purgeDucer; }, 0,
                             500),
        new IntWithinRedline("loxInletDucer in LOX_FILLED", [](const SensorData *data) { return data->loxInletDucer; },
                             0, 15),
        new IntWithinRedline("manifoldInletDucer in LOX_FILLED",
                             [](const SensorData *data) { return data->manifoldInletDucer; }, 0, 15),
        new IntWithinRedline("kerInletDucer in LOX_FILLED", [](const SensorData *data) { return data->kerInletDucer; },
                             0, 15),
        new IntWithinRedline("loxVenturi in LOX_FILLED", [](const SensorData *data) { return data->loxVenturi; }, 0,
                             15),
        new IntWithinRedline("kerVenturi in LOX_FILLED", [](const SensorData *data) { return data->kerVenturi; }, 0,
                             15)};
extern const std::vector<const IRedline *> ONLINE_SAFE = {
        new ValveRedline("loxVent in ONLINE_SAFE", [](const SensorData *data) { return data->loxVent; },
                         ECSValveState::OPEN),
        new ValveRedline("kerVent in ONLINE_SAFE", [](const SensorData *data) { return data->kerVent; },
                         ECSValveState::OPEN),
        new ValveRedline("loxDrip in ONLINE_SAFE", [](const SensorData *data) { return data->loxDrip; },
                         ECSValveState::CLOSED),
        new ValveRedline("kerDrip in ONLINE_SAFE", [](const SensorData *data) { return data->kerDrip; },
                         ECSValveState::CLOSED),
        new ValveRedline("loxPressurant in ONLINE_SAFE", [](const SensorData *data) { return data->loxPressurant; },
                         ECSValveState::CLOSED),
        new ValveRedline("kerPressurant in ONLINE_SAFE", [](const SensorData *data) { return data->kerPressurant; },
                         ECSValveState::CLOSED),
        new ValveRedline("loxFlow in ONLINE_SAFE", [](const SensorData *data) { return data->loxFlow; },
                         ECSValveState::CLOSED),
        new ValveRedline("kerFlow in ONLINE_SAFE", [](const SensorData *data) { return data->kerFlow; },
                         ECSValveState::CLOSED),
        new ValveRedline("loxPurge in ONLINE_SAFE", [](const SensorData *data) { return data->loxPurge; },
                         ECSValveState::CLOSED),
        new ValveRedline("kerPurge in ONLINE_SAFE", [](const SensorData *data) { return data->kerPurge; },
                         ECSValveState::CLOSED),
        new IntWithinRedline("loxTankDucer in ONLINE_SAFE", [](const SensorData *data) { return data->loxTankDucer; },
                             0, 15),
        new IntWithinRedline("kerTankDucer in ONLINE_SAFE", [](const SensorData *data) { return data->kerTankDucer; },
                             0, 15),
        new IntWithinRedline("purgeDucer in ONLINE_SAFE", [](const SensorData *data) { return data->purgeDucer; }, 0,
                             500),
        new IntWithinRedline("loxInletDucer in ONLINE_SAFE", [](const SensorData *data) { return data->loxInletDucer; },
                             0, 15),
        new IntWithinRedline("manifoldInletDucer in ONLINE_SAFE",
                             [](const SensorData *data) { return data->manifoldInletDucer; }, 0, 15),
        new IntWithinRedline("kerInletDucer in ONLINE_SAFE", [](const SensorData *data) { return data->kerInletDucer; },
                             0, 15),
        new IntWithinRedline("loxVenturi in ONLINE_SAFE", [](const SensorData *data) { return data->loxVenturi; }, 0,
                             15),
        new IntWithinRedline("kerVenturi in ONLINE_SAFE", [](const SensorData *data) { return data->kerVenturi; }, 0,
                             15)};
extern const std::vector<const IRedline *> READY_TO_PRESSURIZE = {
        new ValveRedline("loxVent in READY_TO_PRESSURIZE", [](const SensorData *data) { return data->loxVent; },
                         ECSValveState::CLOSED),
        new ValveRedline("kerVent in READY_TO_PRESSURIZE", [](const SensorData *data) { return data->kerVent; },
                         ECSValveState::CLOSED),
        new ValveRedline("loxDrip in READY_TO_PRESSURIZE", [](const SensorData *data) { return data->loxDrip; },
                         ECSValveState::CLOSED),
        new ValveRedline("kerDrip in READY_TO_PRESSURIZE", [](const SensorData *data) { return data->kerDrip; },
                         ECSValveState::CLOSED),
        new ValveRedline("loxPressurant in READY_TO_PRESSURIZE",
                         [](const SensorData *data) { return data->loxPressurant; }, ECSValveState::CLOSED),
        new ValveRedline("kerPressurant in READY_TO_PRESSURIZE",
                         [](const SensorData *data) { return data->kerPressurant; }, ECSValveState::CLOSED),
        new ValveRedline("loxFlow in READY_TO_PRESSURIZE", [](const SensorData *data) { return data->loxFlow; },
                         ECSValveState::CLOSED),
        new ValveRedline("kerFlow in READY_TO_PRESSURIZE", [](const SensorData *data) { return data->kerFlow; },
                         ECSValveState::CLOSED),
        new ValveRedline("loxPurge in READY_TO_PRESSURIZE", [](const SensorData *data) { return data->loxPurge; },
                         ECSValveState::CLOSED),
        new ValveRedline("kerPurge in READY_TO_PRESSURIZE", [](const SensorData *data) { return data->kerPurge; },
                         ECSValveState::CLOSED),
        new IntWithinRedline("loxTankDucer in READY_TO_PRESSURIZE",
                             [](const SensorData *data) { return data->loxTankDucer; }, 0, 200),
        new IntWithinRedline("kerTankDucer in READY_TO_PRESSURIZE",
                             [](const SensorData *data) { return data->kerTankDucer; }, 0, 15),
        new IntWithinRedline("purgeDucer in READY_TO_PRESSURIZE",
                             [](const SensorData *data) { return data->purgeDucer; }, 0, 500),
        new IntWithinRedline("loxInletDucer in READY_TO_PRESSURIZE",
                             [](const SensorData *data) { return data->loxInletDucer; }, 0, 15),
        new IntWithinRedline("manifoldInletDucer in READY_TO_PRESSURIZE",
                             [](const SensorData *data) { return data->manifoldInletDucer; }, 0, 15),
        new IntWithinRedline("kerInletDucer in READY_TO_PRESSURIZE",
                             [](const SensorData *data) { return data->kerInletDucer; }, 0, 15),
        new IntWithinRedline("loxVenturi in READY_TO_PRESSURIZE",
                             [](const SensorData *data) { return data->loxVenturi; }, 0, 15),
        new IntWithinRedline("kerVenturi in READY_TO_PRESSURIZE",
                             [](const SensorData *data) { return data->kerVenturi; }, 0, 15)};
extern const std::vector<const IRedline *> PRESSURIZING = {
        new ValveRedline("loxVent in PRESSURIZING", [](const SensorData *data) { return data->loxVent; },
                         ECSValveState::CLOSED),
        new ValveRedline("kerVent in PRESSURIZING", [](const SensorData *data) { return data->kerVent; },
                         ECSValveState::CLOSED),
        new ValveRedline("loxDrip in PRESSURIZING", [](const SensorData *data) { return data->loxDrip; },
                         ECSValveState::CLOSED),
        new ValveRedline("kerDrip in PRESSURIZING", [](const SensorData *data) { return data->kerDrip; },
                         ECSValveState::CLOSED),
        new ValveRedline("loxPressurant in PRESSURIZING", [](const SensorData *data) { return data->loxPressurant; },
                         ECSValveState::OPEN),
        new ValveRedline("kerPressurant in PRESSURIZING", [](const SensorData *data) { return data->kerPressurant; },
                         ECSValveState::OPEN),
        new ValveRedline("loxFlow in PRESSURIZING", [](const SensorData *data) { return data->loxFlow; },
                         ECSValveState::CLOSED),
        new ValveRedline("kerFlow in PRESSURIZING", [](const SensorData *data) { return data->kerFlow; },
                         ECSValveState::CLOSED),
        new ValveRedline("loxPurge in PRESSURIZING", [](const SensorData *data) { return data->loxPurge; },
                         ECSValveState::CLOSED),
        new ValveRedline("kerPurge in PRESSURIZING", [](const SensorData *data) { return data->kerPurge; },
                         ECSValveState::CLOSED),
        new IntWithinRedline("purgeDucer in PRESSURIZING", [](const SensorData *data) { return data->purgeDucer; }, 0,
                             500),
        new IntWithinRedline("loxInletDucer in PRESSURIZING",
                             [](const SensorData *data) { return data->loxInletDucer; }, 0, 15),
        new IntWithinRedline("manifoldInletDucer in PRESSURIZING",
                             [](const SensorData *data) { return data->manifoldInletDucer; }, 0, 15),
        new IntWithinRedline("kerInletDucer in PRESSURIZING",
                             [](const SensorData *data) { return data->kerInletDucer; }, 0, 15),
        new IntWithinRedline("loxVenturi in PRESSURIZING", [](const SensorData *data) { return data->loxVenturi; }, 0,
                             15),
        new IntWithinRedline("kerVenturi in PRESSURIZING", [](const SensorData *data) { return data->kerVenturi; }, 0,
                             15)};
extern const std::vector<const IRedline *> FIRE = {
        new ValveRedline("loxVent in FIRE", [](const SensorData *data) { return data->loxVent; },
                         ECSValveState::CLOSED),
        new ValveRedline("kerVent in FIRE", [](const SensorData *data) { return data->kerVent; },
                         ECSValveState::CLOSED),
        new ValveRedline("loxDrip in FIRE", [](const SensorData *data) { return data->loxDrip; },
                         ECSValveState::CLOSED),
        new ValveRedline("kerDrip in FIRE", [](const SensorData *data) { return data->kerDrip; },
                         ECSValveState::CLOSED),
        new ValveRedline("loxPressurant in FIRE", [](const SensorData *data) { return data->loxPressurant; },
                         ECSValveState::OPEN),
        new ValveRedline("kerPressurant in FIRE", [](const SensorData *data) { return data->kerPressurant; },
                         ECSValveState::OPEN),
        new ValveRedline("loxFlow in FIRE", [](const SensorData *data) { return data->loxFlow; }, ECSValveState::OPEN),
        new ValveRedline("kerFlow in FIRE", [](const SensorData *data) { return data->kerFlow; }, ECSValveState::OPEN),
        new ValveRedline("loxPurge in FIRE", [](const SensorData *data) { return data->loxPurge; },
                         ECSValveState::CLOSED),
        new ValveRedline("kerPurge in FIRE", [](const SensorData *data) { return data->kerPurge; },
                         ECSValveState::CLOSED),
        new IntWithinRedline("loadCell in FIRE", [](const SensorData *data) { return data->loadCell; }, 0, 1000)};
extern const std::vector<const IRedline *> ENGINE_PURGE = {
        new ValveRedline("loxVent in ENGINE_PURGE", [](const SensorData *data) { return data->loxVent; },
                         ECSValveState::CLOSED),
        new ValveRedline("kerVent in ENGINE_PURGE", [](const SensorData *data) { return data->kerVent; },
                         ECSValveState::CLOSED),
        new ValveRedline("loxDrip in ENGINE_PURGE", [](const SensorData *data) { return data->loxDrip; },
                         ECSValveState::CLOSED),
        new ValveRedline("kerDrip in ENGINE_PURGE", [](const SensorData *data) { return data->kerDrip; },
                         ECSValveState::CLOSED),
        new ValveRedline("loxPressurant in ENGINE_PURGE", [](const SensorData *data) { return data->loxPressurant; },
                         ECSValveState::CLOSED),
        new ValveRedline("kerPressurant in ENGINE_PURGE", [](const SensorData *data) { return data->kerPressurant; },
                         ECSValveState::CLOSED),
        new ValveRedline("loxFlow in ENGINE_PURGE", [](const SensorData *data) { return data->loxFlow; },
                         ECSValveState::CLOSED),
        new ValveRedline("kerFlow in ENGINE_PURGE", [](const SensorData *data) { return data->kerFlow; },
                         ECSValveState::CLOSED),
        new ValveRedline("loxPurge in ENGINE_PURGE", [](const SensorData *data) { return data->loxPurge; },
                         ECSValveState::OPEN),
        new ValveRedline("kerPurge in ENGINE_PURGE", [](const SensorData *data) { return data->kerPurge; },
                         ECSValveState::OPEN),
        new IntWithinRedline("loxTankDucer in ENGINE_PURGE", [](const SensorData *data) { return data->loxTankDucer; },
                             0, 15),
        new IntWithinRedline("kerTankDucer in ENGINE_PURGE", [](const SensorData *data) { return data->kerTankDucer; },
                             0, 15),
        new IntWithinRedline("purgeDucer in ENGINE_PURGE", [](const SensorData *data) { return data->purgeDucer; }, 0,
                             500),
        new IntWithinRedline("loxInletDucer in ENGINE_PURGE",
                             [](const SensorData *data) { return data->loxInletDucer; }, 0, 100),
        new IntWithinRedline("manifoldInletDucer in ENGINE_PURGE",
                             [](const SensorData *data) { return data->manifoldInletDucer; }, 0, 200),
        new IntWithinRedline("kerInletDucer in ENGINE_PURGE",
                             [](const SensorData *data) { return data->kerInletDucer; }, 0, 100)};
extern const std::vector<const IRedline *> TANK_PURGE = {
        new ValveRedline("loxVent in TANK_PURGE", [](const SensorData *data) { return data->loxVent; },
                         ECSValveState::OPEN),
        new ValveRedline("kerVent in TANK_PURGE", [](const SensorData *data) { return data->kerVent; },
                         ECSValveState::OPEN),
        new ValveRedline("loxDrip in TANK_PURGE", [](const SensorData *data) { return data->loxDrip; },
                         ECSValveState::OPEN),
        new ValveRedline("kerDrip in TANK_PURGE", [](const SensorData *data) { return data->kerDrip; },
                         ECSValveState::OPEN),
        new ValveRedline("loxPressurant in TANK_PURGE", [](const SensorData *data) { return data->loxPressurant; },
                         ECSValveState::OPEN),
        new ValveRedline("kerPressurant in TANK_PURGE", [](const SensorData *data) { return data->kerPressurant; },
                         ECSValveState::OPEN),
        new ValveRedline("loxFlow in TANK_PURGE", [](const SensorData *data) { return data->loxFlow; },
                         ECSValveState::OPEN),
        new ValveRedline("kerFlow in TANK_PURGE", [](const SensorData *data) { return data->kerFlow; },
                         ECSValveState::OPEN),
        new ValveRedline("loxPurge in TANK_PURGE", [](const SensorData *data) { return data->loxPurge; },
                         ECSValveState::CLOSED),
        new ValveRedline("kerPurge in TANK_PURGE", [](const SensorData *data) { return data->kerPurge; },
                         ECSValveState::CLOSED),
        new IntWithinRedline("loxTankDucer in TANK_PURGE", [](const SensorData *data) { return data->loxTankDucer; }, 0,
                             50),
        new IntWithinRedline("kerTankDucer in TANK_PURGE", [](const SensorData *data) { return data->kerTankDucer; }, 0,
                             50),
        new IntWithinRedline("purgeDucer in TANK_PURGE", [](const SensorData *data) { return data->purgeDucer; }, 0,
                             500),
        new IntWithinRedline("loxInletDucer in TANK_PURGE", [](const SensorData *data) { return data->loxInletDucer; },
                             0, 100),
        new IntWithinRedline("manifoldInletDucer in TANK_PURGE",
                             [](const SensorData *data) { return data->manifoldInletDucer; }, 0, 200),
        new IntWithinRedline("kerInletDucer in TANK_PURGE", [](const SensorData *data) { return data->kerInletDucer; },
                             0, 100)};