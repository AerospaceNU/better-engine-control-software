//
// Created by kevin on 5/27/2022.
//

#include "utils-and-constants/HorizontalECSRedlines.h"

extern std::vector<IRedline *> ONLINE_SAFE_D_REDLINES = {
        new ValveRedline("loxVent in ONLINE_SAFE_D", [](SensorData *data) { return data->loxVent; },
                         ECSValveState::OPEN),
        new ValveRedline("kerVent in ONLINE_SAFE_D", [](SensorData *data) { return data->kerVent; },
                         ECSValveState::OPEN),
        new ValveRedline("loxDrip in ONLINE_SAFE_D", [](SensorData *data) { return data->loxDrip; },
                         ECSValveState::OPEN),
        new ValveRedline("kerDrip in ONLINE_SAFE_D", [](SensorData *data) { return data->kerDrip; },
                         ECSValveState::OPEN),
        new ValveRedline("loxPressurant in ONLINE_SAFE_D", [](SensorData *data) { return data->loxPressurant; },
                         ECSValveState::CLOSED),
        new ValveRedline("kerPressurant in ONLINE_SAFE_D", [](SensorData *data) { return data->kerPressurant; },
                         ECSValveState::CLOSED),
        new ValveRedline("loxFlow in ONLINE_SAFE_D", [](SensorData *data) { return data->loxFlow; },
                         ECSValveState::CLOSED),
        new ValveRedline("kerFlow in ONLINE_SAFE_D", [](SensorData *data) { return data->kerFlow; },
                         ECSValveState::CLOSED),
        new ValveRedline("loxPurge in ONLINE_SAFE_D", [](SensorData *data) { return data->loxPurge; },
                         ECSValveState::CLOSED),
        new ValveRedline("kerPurge in ONLINE_SAFE_D", [](SensorData *data) { return data->kerPurge; },
                         ECSValveState::CLOSED),
        new IntWithinRedline("loxTankDucer in ONLINE_SAFE_D", [](SensorData *data) { return data->loxTankDucer; },
                             0, 15),
        new IntWithinRedline("kerTankDucer in ONLINE_SAFE_D", [](SensorData *data) { return data->kerTankDucer; },
                             0, 15),
        new IntWithinRedline("purgeDucer in ONLINE_SAFE_D", [](SensorData *data) { return data->purgeDucer; }, 0,
                             500),
        new IntWithinRedline("loxInletDucer in ONLINE_SAFE_D",
                             [](SensorData *data) { return data->loxInletDucer; }, 0, 15),
        new IntWithinRedline("manifoldInletDucer in ONLINE_SAFE_D",
                             [](SensorData *data) { return data->manifoldInletDucer; }, 0, 15),
        new IntWithinRedline("kerInletDucer in ONLINE_SAFE_D",
                             [](SensorData *data) { return data->kerInletDucer; }, 0, 15),
        new IntWithinRedline("loxVenturi in ONLINE_SAFE_D", [](SensorData *data) { return data->loxVenturi; }, 0,
                             15),
        new IntWithinRedline("kerVenturi in ONLINE_SAFE_D", [](SensorData *data) { return data->kerVenturi; }, 0,
                             15),
        new IntWithinRedline("loxTank1 in ONLINE_SAFE_D", [](SensorData *data) { return data->loxTank1; }, 20,
                             30),
        new IntWithinRedline("loxTank2 in ONLINE_SAFE_D", [](SensorData *data) { return data->loxTank2; }, 20,
                             30),
        new IntWithinRedline("loxTank3 in ONLINE_SAFE_D", [](SensorData *data) { return data->loxTank3; }, 20,
                             30),
        new IntWithinRedline("loxDripLine in ONLINE_SAFE_D", [](SensorData *data) { return data->loxDripLine; },
                             20, 30),
        new IntWithinRedline("outsideThroat in ONLINE_SAFE_D",
                             [](SensorData *data) { return data->outsideThroat; }, 20, 30)};
extern std::vector<IRedline *> KERO_FILL_REDLINES = {
        new ValveRedline("loxVent in KERO_FILL", [](SensorData *data) { return data->loxVent; },
                         ECSValveState::OPEN),
        new ValveRedline("kerVent in KERO_FILL", [](SensorData *data) { return data->kerVent; },
                         ECSValveState::OPEN),
        new ValveRedline("loxDrip in KERO_FILL", [](SensorData *data) { return data->loxDrip; },
                         ECSValveState::OPEN),
        new ValveRedline("kerDrip in KERO_FILL", [](SensorData *data) { return data->kerDrip; },
                         ECSValveState::OPEN),
        new ValveRedline("loxPressurant in KERO_FILL", [](SensorData *data) { return data->loxPressurant; },
                         ECSValveState::CLOSED),
        new ValveRedline("kerPressurant in KERO_FILL", [](SensorData *data) { return data->kerPressurant; },
                         ECSValveState::CLOSED),
        new ValveRedline("loxFlow in KERO_FILL", [](SensorData *data) { return data->loxFlow; },
                         ECSValveState::CLOSED),
        new ValveRedline("kerFlow in KERO_FILL", [](SensorData *data) { return data->kerFlow; },
                         ECSValveState::CLOSED),
        new ValveRedline("loxPurge in KERO_FILL", [](SensorData *data) { return data->loxPurge; },
                         ECSValveState::CLOSED),
        new ValveRedline("kerPurge in KERO_FILL", [](SensorData *data) { return data->kerPurge; },
                         ECSValveState::CLOSED),
        new IntWithinRedline("loxTankDucer in KERO_FILL", [](SensorData *data) { return data->loxTankDucer; }, 0,
                             15),
        new IntWithinRedline("kerTankDucer in KERO_FILL", [](SensorData *data) { return data->kerTankDucer; }, 0,
                             15),
        new IntWithinRedline("purgeDucer in KERO_FILL", [](SensorData *data) { return data->purgeDucer; }, 0,
                             500),
        new IntWithinRedline("loxInletDucer in KERO_FILL", [](SensorData *data) { return data->loxInletDucer; },
                             0, 15),
        new IntWithinRedline("manifoldInletDucer in KERO_FILL",
                             [](SensorData *data) { return data->manifoldInletDucer; }, 0, 15),
        new IntWithinRedline("kerInletDucer in KERO_FILL", [](SensorData *data) { return data->kerInletDucer; },
                             0, 15),
        new IntWithinRedline("loxVenturi in KERO_FILL", [](SensorData *data) { return data->loxVenturi; }, 0, 15),
        new IntWithinRedline("kerVenturi in KERO_FILL", [](SensorData *data) { return data->kerVenturi; }, 0,
                             50)};
extern std::vector<IRedline *> KERO_FILLED_REDLINES = {
        new ValveRedline("loxVent in KERO_FILLED", [](SensorData *data) { return data->loxVent; },
                         ECSValveState::OPEN),
        new ValveRedline("kerVent in KERO_FILLED", [](SensorData *data) { return data->kerVent; },
                         ECSValveState::OPEN),
        new ValveRedline("loxDrip in KERO_FILLED", [](SensorData *data) { return data->loxDrip; },
                         ECSValveState::OPEN),
        new ValveRedline("kerDrip in KERO_FILLED", [](SensorData *data) { return data->kerDrip; },
                         ECSValveState::CLOSED),
        new ValveRedline("loxPressurant in KERO_FILLED", [](SensorData *data) { return data->loxPressurant; },
                         ECSValveState::CLOSED),
        new ValveRedline("kerPressurant in KERO_FILLED", [](SensorData *data) { return data->kerPressurant; },
                         ECSValveState::CLOSED),
        new ValveRedline("loxFlow in KERO_FILLED", [](SensorData *data) { return data->loxFlow; },
                         ECSValveState::CLOSED),
        new ValveRedline("kerFlow in KERO_FILLED", [](SensorData *data) { return data->kerFlow; },
                         ECSValveState::CLOSED),
        new ValveRedline("loxPurge in KERO_FILLED", [](SensorData *data) { return data->loxPurge; },
                         ECSValveState::CLOSED),
        new ValveRedline("kerPurge in KERO_FILLED", [](SensorData *data) { return data->kerPurge; },
                         ECSValveState::CLOSED),
        new IntWithinRedline("loxTankDucer in KERO_FILLED", [](SensorData *data) { return data->loxTankDucer; },
                             0, 15),
        new IntWithinRedline("kerTankDucer in KERO_FILLED", [](SensorData *data) { return data->kerTankDucer; },
                             0, 15),
        new IntWithinRedline("purgeDucer in KERO_FILLED", [](SensorData *data) { return data->purgeDucer; }, 0,
                             500),
        new IntWithinRedline("loxInletDucer in KERO_FILLED", [](SensorData *data) { return data->loxInletDucer; },
                             0, 15),
        new IntWithinRedline("manifoldInletDucer in KERO_FILLED",
                             [](SensorData *data) { return data->manifoldInletDucer; }, 0, 15),
        new IntWithinRedline("kerInletDucer in KERO_FILLED", [](SensorData *data) { return data->kerInletDucer; },
                             0, 15),
        new IntWithinRedline("loxVenturi in KERO_FILLED", [](SensorData *data) { return data->loxVenturi; }, 0,
                             15),
        new IntWithinRedline("kerVenturi in KERO_FILLED", [](SensorData *data) { return data->kerVenturi; }, 0,
                             15)};
extern std::vector<IRedline *> LOX_FILL_REDLINES = {
        new ValveRedline("loxVent in LOX_FILL", [](SensorData *data) { return data->loxVent; },
                         ECSValveState::OPEN),
        new ValveRedline("kerVent in LOX_FILL", [](SensorData *data) { return data->kerVent; },
                         ECSValveState::OPEN),
        new ValveRedline("loxDrip in LOX_FILL", [](SensorData *data) { return data->loxDrip; },
                         ECSValveState::OPEN),
        new ValveRedline("kerDrip in LOX_FILL", [](SensorData *data) { return data->kerDrip; },
                         ECSValveState::CLOSED),
        new ValveRedline("loxPressurant in LOX_FILL", [](SensorData *data) { return data->loxPressurant; },
                         ECSValveState::CLOSED),
        new ValveRedline("kerPressurant in LOX_FILL", [](SensorData *data) { return data->kerPressurant; },
                         ECSValveState::CLOSED),
        new ValveRedline("loxFlow in LOX_FILL", [](SensorData *data) { return data->loxFlow; },
                         ECSValveState::CLOSED),
        new ValveRedline("kerFlow in LOX_FILL", [](SensorData *data) { return data->kerFlow; },
                         ECSValveState::CLOSED),
        new ValveRedline("loxPurge in LOX_FILL", [](SensorData *data) { return data->loxPurge; },
                         ECSValveState::CLOSED),
        new ValveRedline("kerPurge in LOX_FILL", [](SensorData *data) { return data->kerPurge; },
                         ECSValveState::CLOSED),
        new IntWithinRedline("loxTankDucer in LOX_FILL", [](SensorData *data) { return data->loxTankDucer; }, 0,
                             15),
        new IntWithinRedline("kerTankDucer in LOX_FILL", [](SensorData *data) { return data->kerTankDucer; }, 0,
                             15),
        new IntWithinRedline("purgeDucer in LOX_FILL", [](SensorData *data) { return data->purgeDucer; }, 0, 500),
        new IntWithinRedline("loxInletDucer in LOX_FILL", [](SensorData *data) { return data->loxInletDucer; }, 0,
                             15),
        new IntWithinRedline("manifoldInletDucer in LOX_FILL",
                             [](SensorData *data) { return data->manifoldInletDucer; }, 0, 15),
        new IntWithinRedline("kerInletDucer in LOX_FILL", [](SensorData *data) { return data->kerInletDucer; }, 0,
                             15),
        new IntWithinRedline("loxVenturi in LOX_FILL", [](SensorData *data) { return data->loxVenturi; }, 0, 50),
        new IntWithinRedline("kerVenturi in LOX_FILL", [](SensorData *data) { return data->kerVenturi; }, 0, 15)};
extern std::vector<IRedline *> LOX_FILLED_REDLINES = {
        new ValveRedline("loxVent in LOX_FILLED", [](SensorData *data) { return data->loxVent; },
                         ECSValveState::OPEN),
        new ValveRedline("kerVent in LOX_FILLED", [](SensorData *data) { return data->kerVent; },
                         ECSValveState::OPEN),
        new ValveRedline("loxDrip in LOX_FILLED", [](SensorData *data) { return data->loxDrip; },
                         ECSValveState::CLOSED),
        new ValveRedline("kerDrip in LOX_FILLED", [](SensorData *data) { return data->kerDrip; },
                         ECSValveState::CLOSED),
        new ValveRedline("loxPressurant in LOX_FILLED", [](SensorData *data) { return data->loxPressurant; },
                         ECSValveState::CLOSED),
        new ValveRedline("kerPressurant in LOX_FILLED", [](SensorData *data) { return data->kerPressurant; },
                         ECSValveState::CLOSED),
        new ValveRedline("loxFlow in LOX_FILLED", [](SensorData *data) { return data->loxFlow; },
                         ECSValveState::CLOSED),
        new ValveRedline("kerFlow in LOX_FILLED", [](SensorData *data) { return data->kerFlow; },
                         ECSValveState::CLOSED),
        new ValveRedline("loxPurge in LOX_FILLED", [](SensorData *data) { return data->loxPurge; },
                         ECSValveState::CLOSED),
        new ValveRedline("kerPurge in LOX_FILLED", [](SensorData *data) { return data->kerPurge; },
                         ECSValveState::CLOSED),
        new IntWithinRedline("loxTankDucer in LOX_FILLED", [](SensorData *data) { return data->loxTankDucer; }, 0,
                             15),
        new IntWithinRedline("kerTankDucer in LOX_FILLED", [](SensorData *data) { return data->kerTankDucer; }, 0,
                             15),
        new IntWithinRedline("purgeDucer in LOX_FILLED", [](SensorData *data) { return data->purgeDucer; }, 0,
                             500),
        new IntWithinRedline("loxInletDucer in LOX_FILLED", [](SensorData *data) { return data->loxInletDucer; },
                             0, 15),
        new IntWithinRedline("manifoldInletDucer in LOX_FILLED",
                             [](SensorData *data) { return data->manifoldInletDucer; }, 0, 15),
        new IntWithinRedline("kerInletDucer in LOX_FILLED", [](SensorData *data) { return data->kerInletDucer; },
                             0, 15),
        new IntWithinRedline("loxVenturi in LOX_FILLED", [](SensorData *data) { return data->loxVenturi; }, 0,
                             15),
        new IntWithinRedline("kerVenturi in LOX_FILLED", [](SensorData *data) { return data->kerVenturi; }, 0,
                             15)};
extern std::vector<IRedline *> ONLINE_SAFE_REDLINES = {
        new ValveRedline("loxVent in ONLINE_SAFE", [](SensorData *data) { return data->loxVent; },
                         ECSValveState::OPEN),
        new ValveRedline("kerVent in ONLINE_SAFE", [](SensorData *data) { return data->kerVent; },
                         ECSValveState::OPEN),
        new ValveRedline("loxDrip in ONLINE_SAFE", [](SensorData *data) { return data->loxDrip; },
                         ECSValveState::CLOSED),
        new ValveRedline("kerDrip in ONLINE_SAFE", [](SensorData *data) { return data->kerDrip; },
                         ECSValveState::CLOSED),
        new ValveRedline("loxPressurant in ONLINE_SAFE", [](SensorData *data) { return data->loxPressurant; },
                         ECSValveState::CLOSED),
        new ValveRedline("kerPressurant in ONLINE_SAFE", [](SensorData *data) { return data->kerPressurant; },
                         ECSValveState::CLOSED),
        new ValveRedline("loxFlow in ONLINE_SAFE", [](SensorData *data) { return data->loxFlow; },
                         ECSValveState::CLOSED),
        new ValveRedline("kerFlow in ONLINE_SAFE", [](SensorData *data) { return data->kerFlow; },
                         ECSValveState::CLOSED),
        new ValveRedline("loxPurge in ONLINE_SAFE", [](SensorData *data) { return data->loxPurge; },
                         ECSValveState::CLOSED),
        new ValveRedline("kerPurge in ONLINE_SAFE", [](SensorData *data) { return data->kerPurge; },
                         ECSValveState::CLOSED),
        new IntWithinRedline("loxTankDucer in ONLINE_SAFE", [](SensorData *data) { return data->loxTankDucer; },
                             0, 15),
        new IntWithinRedline("kerTankDucer in ONLINE_SAFE", [](SensorData *data) { return data->kerTankDucer; },
                             0, 15),
        new IntWithinRedline("purgeDucer in ONLINE_SAFE", [](SensorData *data) { return data->purgeDucer; }, 0,
                             500),
        new IntWithinRedline("loxInletDucer in ONLINE_SAFE", [](SensorData *data) { return data->loxInletDucer; },
                             0, 15),
        new IntWithinRedline("manifoldInletDucer in ONLINE_SAFE",
                             [](SensorData *data) { return data->manifoldInletDucer; }, 0, 15),
        new IntWithinRedline("kerInletDucer in ONLINE_SAFE", [](SensorData *data) { return data->kerInletDucer; },
                             0, 15),
        new IntWithinRedline("loxVenturi in ONLINE_SAFE", [](SensorData *data) { return data->loxVenturi; }, 0,
                             15),
        new IntWithinRedline("kerVenturi in ONLINE_SAFE", [](SensorData *data) { return data->kerVenturi; }, 0,
                             15)};
extern std::vector<IRedline *> READY_TO_PRESSURIZE_REDLINES = {
        new ValveRedline("loxVent in READY_TO_PRESSURIZE", [](SensorData *data) { return data->loxVent; },
                         ECSValveState::CLOSED),
        new ValveRedline("kerVent in READY_TO_PRESSURIZE", [](SensorData *data) { return data->kerVent; },
                         ECSValveState::CLOSED),
        new ValveRedline("loxDrip in READY_TO_PRESSURIZE", [](SensorData *data) { return data->loxDrip; },
                         ECSValveState::CLOSED),
        new ValveRedline("kerDrip in READY_TO_PRESSURIZE", [](SensorData *data) { return data->kerDrip; },
                         ECSValveState::CLOSED),
        new ValveRedline("loxPressurant in READY_TO_PRESSURIZE",
                         [](SensorData *data) { return data->loxPressurant; }, ECSValveState::CLOSED),
        new ValveRedline("kerPressurant in READY_TO_PRESSURIZE",
                         [](SensorData *data) { return data->kerPressurant; }, ECSValveState::CLOSED),
        new ValveRedline("loxFlow in READY_TO_PRESSURIZE", [](SensorData *data) { return data->loxFlow; },
                         ECSValveState::CLOSED),
        new ValveRedline("kerFlow in READY_TO_PRESSURIZE", [](SensorData *data) { return data->kerFlow; },
                         ECSValveState::CLOSED),
        new ValveRedline("loxPurge in READY_TO_PRESSURIZE", [](SensorData *data) { return data->loxPurge; },
                         ECSValveState::CLOSED),
        new ValveRedline("kerPurge in READY_TO_PRESSURIZE", [](SensorData *data) { return data->kerPurge; },
                         ECSValveState::CLOSED),
        new IntWithinRedline("loxTankDucer in READY_TO_PRESSURIZE",
                             [](SensorData *data) { return data->loxTankDucer; }, 0, 200),
        new IntWithinRedline("kerTankDucer in READY_TO_PRESSURIZE",
                             [](SensorData *data) { return data->kerTankDucer; }, 0, 15),
        new IntWithinRedline("purgeDucer in READY_TO_PRESSURIZE",
                             [](SensorData *data) { return data->purgeDucer; }, 0, 500),
        new IntWithinRedline("loxInletDucer in READY_TO_PRESSURIZE",
                             [](SensorData *data) { return data->loxInletDucer; }, 0, 15),
        new IntWithinRedline("manifoldInletDucer in READY_TO_PRESSURIZE",
                             [](SensorData *data) { return data->manifoldInletDucer; }, 0, 15),
        new IntWithinRedline("kerInletDucer in READY_TO_PRESSURIZE",
                             [](SensorData *data) { return data->kerInletDucer; }, 0, 15),
        new IntWithinRedline("loxVenturi in READY_TO_PRESSURIZE",
                             [](SensorData *data) { return data->loxVenturi; }, 0, 15),
        new IntWithinRedline("kerVenturi in READY_TO_PRESSURIZE",
                             [](SensorData *data) { return data->kerVenturi; }, 0, 15)};
extern std::vector<IRedline *> PRESSURIZING_REDLINES = {
        new ValveRedline("loxVent in PRESSURIZING", [](SensorData *data) { return data->loxVent; },
                         ECSValveState::CLOSED),
        new ValveRedline("kerVent in PRESSURIZING", [](SensorData *data) { return data->kerVent; },
                         ECSValveState::CLOSED),
        new ValveRedline("loxDrip in PRESSURIZING", [](SensorData *data) { return data->loxDrip; },
                         ECSValveState::CLOSED),
        new ValveRedline("kerDrip in PRESSURIZING", [](SensorData *data) { return data->kerDrip; },
                         ECSValveState::CLOSED),
        new ValveRedline("loxPressurant in PRESSURIZING", [](SensorData *data) { return data->loxPressurant; },
                         ECSValveState::OPEN),
        new ValveRedline("kerPressurant in PRESSURIZING", [](SensorData *data) { return data->kerPressurant; },
                         ECSValveState::OPEN),
        new ValveRedline("loxFlow in PRESSURIZING", [](SensorData *data) { return data->loxFlow; },
                         ECSValveState::CLOSED),
        new ValveRedline("kerFlow in PRESSURIZING", [](SensorData *data) { return data->kerFlow; },
                         ECSValveState::CLOSED),
        new ValveRedline("loxPurge in PRESSURIZING", [](SensorData *data) { return data->loxPurge; },
                         ECSValveState::CLOSED),
        new ValveRedline("kerPurge in PRESSURIZING", [](SensorData *data) { return data->kerPurge; },
                         ECSValveState::CLOSED),
        new IntWithinRedline("purgeDucer in PRESSURIZING", [](SensorData *data) { return data->purgeDucer; }, 0,
                             500),
        new IntWithinRedline("loxInletDucer in PRESSURIZING",
                             [](SensorData *data) { return data->loxInletDucer; }, 0, 15),
        new IntWithinRedline("manifoldInletDucer in PRESSURIZING",
                             [](SensorData *data) { return data->manifoldInletDucer; }, 0, 15),
        new IntWithinRedline("kerInletDucer in PRESSURIZING",
                             [](SensorData *data) { return data->kerInletDucer; }, 0, 15),
        new IntWithinRedline("loxVenturi in PRESSURIZING", [](SensorData *data) { return data->loxVenturi; }, 0,
                             15),
        new IntWithinRedline("kerVenturi in PRESSURIZING", [](SensorData *data) { return data->kerVenturi; }, 0,
                             15)};
extern std::vector<IRedline *> FIRE_REDLINES = {
        new ValveRedline("loxVent in FIRE", [](SensorData *data) { return data->loxVent; },
                         ECSValveState::CLOSED),
        new ValveRedline("kerVent in FIRE", [](SensorData *data) { return data->kerVent; },
                         ECSValveState::CLOSED),
        new ValveRedline("loxDrip in FIRE", [](SensorData *data) { return data->loxDrip; },
                         ECSValveState::CLOSED),
        new ValveRedline("kerDrip in FIRE", [](SensorData *data) { return data->kerDrip; },
                         ECSValveState::CLOSED),
        new ValveRedline("loxPressurant in FIRE", [](SensorData *data) { return data->loxPressurant; },
                         ECSValveState::OPEN),
        new ValveRedline("kerPressurant in FIRE", [](SensorData *data) { return data->kerPressurant; },
                         ECSValveState::OPEN),
        new ValveRedline("loxFlow in FIRE", [](SensorData *data) { return data->loxFlow; }, ECSValveState::OPEN),
        new ValveRedline("kerFlow in FIRE", [](SensorData *data) { return data->kerFlow; }, ECSValveState::OPEN),
        new ValveRedline("loxPurge in FIRE", [](SensorData *data) { return data->loxPurge; },
                         ECSValveState::CLOSED),
        new ValveRedline("kerPurge in FIRE", [](SensorData *data) { return data->kerPurge; },
                         ECSValveState::CLOSED),
        new IntWithinRedline("loadCell in FIRE", [](SensorData *data) { return data->loadCell; }, 0, 1000)};
extern std::vector<IRedline *> ENGINE_PURGE_REDLINES = {
        new ValveRedline("loxVent in ENGINE_PURGE", [](SensorData *data) { return data->loxVent; },
                         ECSValveState::CLOSED),
        new ValveRedline("kerVent in ENGINE_PURGE", [](SensorData *data) { return data->kerVent; },
                         ECSValveState::CLOSED),
        new ValveRedline("loxDrip in ENGINE_PURGE", [](SensorData *data) { return data->loxDrip; },
                         ECSValveState::CLOSED),
        new ValveRedline("kerDrip in ENGINE_PURGE", [](SensorData *data) { return data->kerDrip; },
                         ECSValveState::CLOSED),
        new ValveRedline("loxPressurant in ENGINE_PURGE", [](SensorData *data) { return data->loxPressurant; },
                         ECSValveState::CLOSED),
        new ValveRedline("kerPressurant in ENGINE_PURGE", [](SensorData *data) { return data->kerPressurant; },
                         ECSValveState::CLOSED),
        new ValveRedline("loxFlow in ENGINE_PURGE", [](SensorData *data) { return data->loxFlow; },
                         ECSValveState::CLOSED),
        new ValveRedline("kerFlow in ENGINE_PURGE", [](SensorData *data) { return data->kerFlow; },
                         ECSValveState::CLOSED),
        new ValveRedline("loxPurge in ENGINE_PURGE", [](SensorData *data) { return data->loxPurge; },
                         ECSValveState::OPEN),
        new ValveRedline("kerPurge in ENGINE_PURGE", [](SensorData *data) { return data->kerPurge; },
                         ECSValveState::OPEN),
        new IntWithinRedline("loxTankDucer in ENGINE_PURGE", [](SensorData *data) { return data->loxTankDucer; },
                             0, 15),
        new IntWithinRedline("kerTankDucer in ENGINE_PURGE", [](SensorData *data) { return data->kerTankDucer; },
                             0, 15),
        new IntWithinRedline("purgeDucer in ENGINE_PURGE", [](SensorData *data) { return data->purgeDucer; }, 0,
                             500),
        new IntWithinRedline("loxInletDucer in ENGINE_PURGE",
                             [](SensorData *data) { return data->loxInletDucer; }, 0, 100),
        new IntWithinRedline("manifoldInletDucer in ENGINE_PURGE",
                             [](SensorData *data) { return data->manifoldInletDucer; }, 0, 200),
        new IntWithinRedline("kerInletDucer in ENGINE_PURGE",
                             [](SensorData *data) { return data->kerInletDucer; }, 0, 100)};
extern std::vector<IRedline *> TANK_PURGE_REDLINES = {
        new ValveRedline("loxVent in TANK_PURGE", [](SensorData *data) { return data->loxVent; },
                         ECSValveState::OPEN),
        new ValveRedline("kerVent in TANK_PURGE", [](SensorData *data) { return data->kerVent; },
                         ECSValveState::OPEN),
        new ValveRedline("loxDrip in TANK_PURGE", [](SensorData *data) { return data->loxDrip; },
                         ECSValveState::OPEN),
        new ValveRedline("kerDrip in TANK_PURGE", [](SensorData *data) { return data->kerDrip; },
                         ECSValveState::OPEN),
        new ValveRedline("loxPressurant in TANK_PURGE", [](SensorData *data) { return data->loxPressurant; },
                         ECSValveState::OPEN),
        new ValveRedline("kerPressurant in TANK_PURGE", [](SensorData *data) { return data->kerPressurant; },
                         ECSValveState::OPEN),
        new ValveRedline("loxFlow in TANK_PURGE", [](SensorData *data) { return data->loxFlow; },
                         ECSValveState::OPEN),
        new ValveRedline("kerFlow in TANK_PURGE", [](SensorData *data) { return data->kerFlow; },
                         ECSValveState::OPEN),
        new ValveRedline("loxPurge in TANK_PURGE", [](SensorData *data) { return data->loxPurge; },
                         ECSValveState::CLOSED),
        new ValveRedline("kerPurge in TANK_PURGE", [](SensorData *data) { return data->kerPurge; },
                         ECSValveState::CLOSED),
        new IntWithinRedline("loxTankDucer in TANK_PURGE", [](SensorData *data) { return data->loxTankDucer; }, 0,
                             50),
        new IntWithinRedline("kerTankDucer in TANK_PURGE", [](SensorData *data) { return data->kerTankDucer; }, 0,
                             50),
        new IntWithinRedline("purgeDucer in TANK_PURGE", [](SensorData *data) { return data->purgeDucer; }, 0,
                             500),
        new IntWithinRedline("loxInletDucer in TANK_PURGE", [](SensorData *data) { return data->loxInletDucer; },
                             0, 100),
        new IntWithinRedline("manifoldInletDucer in TANK_PURGE",
                             [](SensorData *data) { return data->manifoldInletDucer; }, 0, 200),
        new IntWithinRedline("kerInletDucer in TANK_PURGE", [](SensorData *data) { return data->kerInletDucer; },
                             0, 100)};